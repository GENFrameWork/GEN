# --------------------------------------------------------------------
# CMakeLists.txt to GEN FrameWork
# 
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Debug / Release 

if(DEBUG_FEATURE)
  add_definitions(-D_DEBUG)
  set(CMAKE_BUILD_TYPE "Debug"  CACHE STRING "" FORCE)
  set(CMAKE_CONFIGURATION_TYPES "Debug" CACHE STRING "" FORCE)
else()
  set(CMAKE_BUILD_TYPE "Release"  CACHE STRING "" FORCE)
  set(CMAKE_CONFIGURATION_TYPES "Release" CACHE STRING "" FORCE)
endif()



# --------------------------------------------------------------------
# Directorys of the Application

set(GEN_DIRECTORY_SOURCES                                     "${GEN_DIRECTORY}/GEN")
set(GEN_DIRECTORY_SOURCES_COMMON                              "${GEN_DIRECTORY_SOURCES}/Common")
set(GEN_DIRECTORY_SOURCES_MAINPROC                            "${GEN_DIRECTORY_SOURCES}/MainProc")
set(GEN_DIRECTORY_SOURCES_CIPHER                              "${GEN_DIRECTORY_SOURCES}/Cipher")
set(GEN_DIRECTORY_SOURCES_COMPRESS                            "${GEN_DIRECTORY_SOURCES}/Compress")
set(GEN_DIRECTORY_SOURCES_DATAIO                              "${GEN_DIRECTORY_SOURCES}/DataIO")
set(GEN_DIRECTORY_SOURCES_DATAIO_I2C                          "${GEN_DIRECTORY_SOURCES_DATAIO}/I2C")
set(GEN_DIRECTORY_SOURCES_DATAIO_SPI                          "${GEN_DIRECTORY_SOURCES_DATAIO}/SPI")
set(GEN_DIRECTORY_SOURCES_GRAPHIC                            "${GEN_DIRECTORY_SOURCES}/Graphic")
set(GEN_DIRECTORY_SOURCES_GRAPHIC_2D                          "${GEN_DIRECTORY_SOURCES_GRAPHIC}/2D")
set(GEN_DIRECTORY_SOURCES_GRAPHIC_3D                          "${GEN_DIRECTORY_SOURCES_GRAPHIC}/3D")
set(GEN_DIRECTORY_SOURCES_USERINTERFACE                       "${GEN_DIRECTORY_SOURCES}/UserInterface")
set(GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN                  "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/Skin")
set(GEN_DIRECTORY_SOURCES_INPUT                               "${GEN_DIRECTORY_SOURCES}/Input")
set(GEN_DIRECTORY_SOURCES_APPLICATION                         "${GEN_DIRECTORY_SOURCES}/Application")
set(GEN_DIRECTORY_SOURCES_UTILS                               "${GEN_DIRECTORY_SOURCES}/Utils")
set(GEN_DIRECTORY_SOURCES_SCRIPT                              "${GEN_DIRECTORY_SOURCES}/Script")
set(GEN_DIRECTORY_SOURCES_SCRIPT_LIB                          "${GEN_DIRECTORY_SOURCES_SCRIPT}/Lib")
set(GEN_DIRECTORY_SOURCES_SOUND                               "${GEN_DIRECTORY_SOURCES}/Sound")
set(GEN_DIRECTORY_SOURCES_MEDIA                               "${GEN_DIRECTORY_SOURCES}/Media")
set(GEN_DIRECTORY_SOURCES_DATABASES                           "${GEN_DIRECTORY_SOURCES}/Databases")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL                       "${GEN_DIRECTORY_SOURCES_DATABASES}/SQL")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL                 "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/MySQL")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL            "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/PostgreSQL")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE                "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/SQLite")
set(GEN_DIRECTORY_SOURCES_PLATFORMS                           "${GEN_DIRECTORY_SOURCES}/Platforms")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON                    "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Common")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL          "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON}/SNDOpenAL")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS                   "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Windows")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX                     "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Linux")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID                   "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Android")

list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_COMMON})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_MAINPROC})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_CIPHER})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_COMPRESS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_I2C})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_SPI})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_GRAPHIC})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_GRAPHIC_2D})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_GRAPHIC_3D})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_USERINTERFACE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_INPUT})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_APPLICATION})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_UTILS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_SCRIPT})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_SCRIPT_LIB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_SOUND})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_MEDIA})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID})



# --------------------------------------------------------------------
# Directorys of the ThirdPartyLibraries

set(GEN_DIRECTORY_THIRDPARTYLIBRARIES                    "${GEN_DIRECTORY}/ThirdPartyLibraries")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_INCLUDE        "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/agg/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES        "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/agg/src")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_FREETYPE2      "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/agg/font_freetype")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_INCLUDE  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/freetype2/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/freetype2/src")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_OPENAL             "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/OpenAL/sdk/include")	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_SQLITE             "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/sqlite")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_MYSQL              "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/mysql-connector-c/include")	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_LIBPQ    "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/postgresql/src/interfaces/libpq")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_IFACES   "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/postgresql/src/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_INCLUDE       "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/glew/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_SOURCE        "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/glew/src")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB            "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/jpeglib")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG             "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/libpng")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_STB                "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/stb")	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_FFMPEG             "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/ffmpeg")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA                "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/lua/src") 								
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_DUKTAPE            "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/duktape/src") 	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPCAP            "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/libpcap")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_LIB          "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/npcap/Lib")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_INCLUDE      "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/npcap/Include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB               "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/zlib")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP       "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/zlib/contrib/minizip") 
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_TOAST              "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/Toast++")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_STACKWALKER        "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/StackWalker")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X         "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/rpi_ws281x")


list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_INCLUDE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_FREETYPE2})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_INCLUDE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_OPENAL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_SQLITE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_LIBPQ})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_IFACES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_INCLUDE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_SOURCE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_STB})
#list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FFMPEG})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_DUKTAPE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP})


if(COMPILE_TO_WINDOWS)
  
  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_TOAST})
  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_STACKWALKER})
  
  if(DIO_PCAP_FEATURE)
    list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_LIB})
    list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_INCLUDE})
  endif()
  
  if(COMPILE_TO_WINDOWS_PC_32)

    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/OpenAL/sdk/libs/Win32")

    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/mysql-connector-c/libmysql/mysql-connector-c-6.1.11-win32/lib")
    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/postgresql/Release/libpq/lib_32")
  
   endif()

endif()


if(COMPILE_TO_LINUX)

  if(LINUX_X11_FEATURE)     
    #list(APPEND INCLUDES_DIR "../../../../../../usr/include")
    #message(${INCLUDES_DIR})
  endif()

  if(DIO_LINUX_DBUS_FEATURE)         
    list(APPEND INCLUDES_DIR "/usr/include/dbus-1.0")
    list(APPEND INCLUDES_DIR "/usr/lib/x86_64-linux-gnu/dbus-1.0/include")
  endif()

  if(DIO_LINUX_NETWORKMANAGER_FEATURE)         
    list(APPEND INCLUDES_DIR "/usr/include/libnm")
    list(APPEND INCLUDES_DIR "/usr/include/glib-2.0")
    list(APPEND INCLUDES_DIR "/usr/lib/x86_64-linux-gnu/glib-2.0/include")
  endif()
  
  if(DIO_PCAP_FEATURE)
    list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPCAP})
  endif()  

  if(COMPILE_TO_LINUX_ARM_RASPBERRYPI)  
    if(DIO_LEDNEOPIXELWS2812B_FEATURE)
      list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X})
    endif()

  endif()  

endif()


if(COMPILE_TO_ANDROID)

  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ANDROID_GLUE})

endif()



link_directories(${LIBRARIES_DIR})


# ------------------------------------------------------------------------------------------------
# App Modes

if(APPMODE_SERVICE_FEATURE)
  
  add_definitions(-DAPPMODE_SERVICE)
  
  #set(GEN_APPMODE_SERVICE_NAME            "-DAPPMODE_SERVICE_NAME=__L(\"Service\")")
  #add_definitions(${GEN_APPMODE_SERVICE_NAME})

  #set(GEN_APPMODE_SERVICE_DISPLAYNAME     "-DAPPMODE_SERVICE_DISPLAYNAME=__L(\"Application Service\")")
  #add_definitions(${GEN_APPMODE_SERVICE_DISPLAYNAME})   

endif()



# ------------------------------------------------------------------------------------------------
# Library import/export activation


if(APPMODE_LIBRARY_DINAMIC_FEATURE)
   
  set(APPMODE_API_LIB_FEATURE                              true    CACHE BOOL "Activates the export/import of classes in a library"        FORCE)
  set(APPMODE_API_LIB_EXPORT_FEATURE                       true    CACHE BOOL "Activates the export of classes in a library"               FORCE)
  
  add_definitions(-DAPPMODE_LIBRARY_DINAMIC)

endif()

if(APPMODE_API_LIB_FEATURE)

  add_definitions(-DAPPMODE_API_LIB_ACTIVE)
  
  if(APPMODE_API_LIB_EXPORT_FEATURE)
    add_definitions(-DAPPMODE_API_LIB_EXPORT_ACTIVE)  
  endif() 
  
endif()

  



# ------------------------------------------------------------------------------------------------
# Macros SINGLETON

# --- eXtensions ---------------------------------------------------

set(GEN_MACRO  "-DGEN_XFACTORY=XFACTORY::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XSLEEP=XSLEEP::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XLOG=XLOG::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XSYSTEM=XSYSTEM::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XPROCESSMANAGER=XPROCESSMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XPATHSMANAGER=XPATHSMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XTRANSLATION=XTRANSLATION::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XPUBLISHER=XPUBLISHER::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XSHAREDMEMORYMANAGER=XSHAREDMEMORYMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XDRIVEIMAGEMANAGER=XDRIVEIMAGEMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_XEEPROMMEMORYMANAGER=XEEPROMMEMORYMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})

# --- Data Input/Output Manager -----------------------------------

set(GEN_MACRO  "-DGEN_DIOFACTORY=DIOFACTORY::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_DIOGPIO=DIOGPIO::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_DIODNSRESOLVED=DIODNSRESOLVED::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_DIOALERTS=DIOALERTS::GetInstance()")
add_definitions(${GEN_MACRO})
set(GEN_MACRO  "-DGEN_APPALERTS=APPALERTS::GetInstance()")
add_definitions(${GEN_MACRO})

# --- Graphics Manager --------------------------------------------

set(GEN_MACRO  "-DGEN_GRPFACTORY=GRPFACTORY::GetInstance()")
add_definitions(${GEN_MACRO})

# --- Input Manager -----------------------------------------------

set(GEN_MACRO  "-DGEN_INPMANAGER=INPMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})

# --- Sound Manager -----------------------------------------------

set(GEN_MACRO  "-DGEN_SNDFACTORY=SNDFACTORY::GetInstance()")
add_definitions(${GEN_MACRO})

# --- User Interface ----------------------------------------------

set(GEN_MACRO  "-DGEN_USERINTERFACE=UI_MANAGER::GetInstance()")
add_definitions(${GEN_MACRO})


# --------------------------------------------------------------------
# Definitions platform

add_definitions(-DUNICODE)



# ----------------------------------------
# Platform Windows 

if(COMPILE_TO_WINDOWS)
         
  add_definitions(-DWINDOWS)
  add_definitions(-DHW_PC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)

  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4091")    #  warning C4091: 'typedef ': ignored on left of 'xxx' when no variable is declared       
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4595")    #  warning C4595: 'xxx': non-member operator new or delete functions may not be declared inline
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4996")    #  warning C4996: 'xxx': was declared deprecated      
    
  if(APPMODE_WINDOWS_DINAMIC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251")  #  warning C4251: needs to have dll-interface to be used by clients of class 'xxxxxxxx'
  endif()
    
  #-------------------------------------------------------------------------------------------
  # Set Static librarys

  set(CompilerFlags CMAKE_C_FLAGS 
                    CMAKE_C_FLAGS_DEBUG 
                    CMAKE_C_FLAGS_RELEASE 
                    CMAKE_C_FLAGS_MINSIZEREL 
                    CMAKE_C_FLAGS_RELWITHDEBINFO

                    CMAKE_CXX_FLAGS 
                    CMAKE_CXX_FLAGS_DEBUG 
                    CMAKE_CXX_FLAGS_RELEASE 
                    CMAKE_CXX_FLAGS_MINSIZEREL 
                    CMAKE_CXX_FLAGS_RELWITHDEBINFO)
        
  foreach(CompilerFlag ${CompilerFlags})
     if(APPMODE_WINDOWS_DINAMIC)  
     string(REPLACE "/MT" "/MD" ${CompilerFlag} "${${CompilerFlag}}")
     else()
     string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
     endif()  
      
     set(${CompilerFlag} "${${CompilerFlag}}" CACHE STRING "msvc compiler flags" FORCE)
     #message("MSVC flags: ${CompilerFlag}:${${CompilerFlag}}")
   endforeach()

  #-------------------------------------------------------------------------------------------

  set(XTRANSLATION_FEATURE                              true    CACHE BOOL "Activate Translation"                                       FORCE)   
    
endif()



# -------------------------------------------
# Platform Linux 

if(COMPILE_TO_LINUX)
  
  add_definitions(-DLINUX)

  if(LINUX_X11_FEATURE)     
   add_definitions(-DLINUX_X11_ACTIVE)      
  endif()
  
  if(LINUX_VISUALSTUDIOCODEPAGE_FEATURE)
    set(CMAKE_CXX_FLAGS "-finput-charset=CP1252")
  endif()


  set(XTRANSLATION_FEATURE                              true    CACHE BOOL "Activate Translation"                                       FORCE)   

  # ----------------------------------------
  # PC 

  if(COMPILE_TO_LINUX_PC_64) 
  
    add_definitions(-DHW_PC)    

  endif()


  # ----------------------------------------
  # Platform Raspberry Pi
  
  if(COMPILE_TO_LINUX_ARM_RASPBERRYPI)

    # Define our host system
    set(CMAKE_SYSTEM_NAME Linux)
    set(CMAKE_SYSTEM_PROCESSOR arm)
              
    add_definitions(-DLINUX)
    add_definitions(-DHW_RASPBERRYPI) 
    
    list(APPEND INCLUDES_DIR "/usr/local/pi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/arm-linux-gnueabihf/sysroot/usr/include/arm-linux-gnueabihf/")     
    
    # Define the cross compiler locations
    set(RPI_TOOLS "/usr/local/pi/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf")
    set(CMAKE_C_COMPILER   "${RPI_TOOLS}/bin/arm-linux-gnueabihf-gcc")
    set(CMAKE_CXX_COMPILER "${RPI_TOOLS}/bin/arm-linux-gnueabihf-g++")
    
    # Define the sysroot path for the RaspberryPi distribution in our tools folder 
    set(CMAKE_FIND_ROOT_PATH "${RPI_TOOLS}/arm-linux-gnueabihf/sysroot/")
    
    # Use our definitions for compiler tools
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    
    # Search for libraries and headers in the target directories only
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
            
  endif()


  # ----------------------------------------
  # Platform NXP iMX6
  
  if(COMPILE_TO_LINUX_ARM_NXP_IMX6)
    
    set(CMAKE_SYSTEM_NAME Linux)
    set(CMAKE_SYSTEM_PROCESSOR arm)  
      
    add_definitions(-DLINUX)
    add_definitions(-DHW_NXP_IMX6) 
        
               
    # Define the cross compiler locations
    list(APPEND INCLUDES_DIR "/usr/")    
    set(NXPIMX "/usr")
    set(CMAKE_C_COMPILER   "${NXPIMX}/bin/arm-linux-gnueabihf-gcc")
    set(CMAKE_CXX_COMPILER "${NXPIMX}/bin/arm-linux-gnueabihf-g++")
              
    # Use our definitions for compiler tools
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    
    # Search for libraries and headers in the target directories only
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

   endif()
   
   
   # ----------------------------------------
   # Platform NXP iMX8
  
   if(COMPILE_TO_LINUX_ARM_NXP_IMX8)
    
    set(CMAKE_SYSTEM_NAME Linux)
    set(CMAKE_SYSTEM_PROCESSOR arm)  
      
    add_definitions(-DLINUX)
    add_definitions(-DHW_NXP_IMX8) 
        
                      
    list(APPEND INCLUDES_DIR "/usr/include/")    
    
    set(NXPIMX "/usr")
    set(CMAKE_C_COMPILER   "${NXPIMX}/bin/aarch64-linux-gnu-gcc")
    set(CMAKE_CXX_COMPILER "${NXPIMX}/bin/aarch64-linux-gnu-g++")
        
    
    # Use our definitions for compiler tools
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
    
    # Search for libraries and headers in the target directories only
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

   endif()
   

endif()



# ----------------------------------------
# Platform Android
  
if(COMPILE_TO_ANDROID)
      
  add_definitions(-DANDROID)    
  add_definitions(-DIOAPI_NO_64)
  add_definitions(-DFT_DEBUG_LEVEL_ERROR)
  add_definitions(-DFT_DEBUG_LEVEL_TRACE)
  add_definitions(-DFT2_BUILD_LIBRARY)

  set(ANDROID_ABI arm64-v8a)
  set(ANDROID_PLATFORM android-23)  
  set(ANDROID_NDK ANDROID_NDK_ROOT)
  set(CMAKE_TOOLCHAIN_FILE  "${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake")
  

  #set(CMAKE_C_COMPILER   "D:/GENFrameWork/ThirdPartyLibraries/android-ndk-r23b/toolchains/llvm/prebuilt/windows-x86_64/bin/clang-cl.exe")
  #set(CMAKE_CXX_COMPILER "D:/GENFrameWork/ThirdPartyLibraries/android-ndk-r23b/toolchains/llvm/prebuilt/windows-x86_64/bin/clang++.exe")

  #set(CMAKE_C_COMPILER   "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/bin/clang-cl")
  #set(CMAKE_CXX_COMPILER "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/bin/clang++")
   
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include")
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include/arm-linux-androideabi")
  
  
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include")  
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/sysroot/usr/include")

  #add_library(native_app_glue STATIC ${ANDROID_NDK_ROOT}/sources/android/native_app_glue/android_native_app_glue.c)
  #target_include_directories(native_app_glue PUBLIC ${ANDROID_NDK_ROOT}/sources/android/native_app_glue)

  set(XTRANSLATION_FEATURE                              true    CACHE BOOL "Activate Translation"                                       FORCE)   
                              
endif()   



# -------------------------------------------
# Platform STM32

if(COMPILE_TO_STM32)

  # Configure the project
  set(CMAKE_C_STANDARD 11)
  set(CMAKE_CXX_STANDARD 17)

  # Specify the cross compiler
  set(CMAKE_SYSTEM_NAME Generic)
  set(CMAKE_SYSTEM_VERSION 1)
  set(CMAKE_C_COMPILER_WORKS 1)
  set(CMAKE_C_COMPILER arm-none-eabi-gcc)
  set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
  set(AS arm-none-eabi-as)
  set(AR arm-none-eabi-ar)
  set(OBJCOPY arm-none-eabi-objcopy)
  set(OBJDUMP arm-none-eabi-objdump)
  set(SIZE arm-none-eabi-size)

  set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32/${DEVICE_NAME}_FLASH.ld)
 
  #Uncomment for hardware floating point
  set(FPU_FLAGS "-mfloat-abi=hard -mfpu=fpv4-sp-d16")
  add_definitions(-DARM_MATH_CM4 -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -D__FPU_PRESENT=1 )

  #Uncomment for software floating point
  #set(FPU_FLAGS "-mfloat-abi=soft")

  set(COMMON_FLAGS "-mcpu=cortex-m4 ${FPU_FLAGS} -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -g -fno-common -fmessage-length=0 -specs=nosys.specs -specs=nano.specs")

  set(CMAKE_C_FLAGS "${COMMON_FLAGS}")
  set(CMAKE_CXX_FLAGS "${COMMON_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS_INIT "-Wl,-gc-sections -T ${LINKER_SCRIPT}")

  add_definitions(-D__weak=__attribute__\(\(weak\)\) -D__packed=__attribute__\(\(__packed__\)\) -DUSE_HAL_DRIVER -${SHORT_DEVICE_ID}xx)

  file(GLOB_RECURSE SOURCES "startup/*.*" "Drivers/*.*" "Src/*.*" "Inc/*.*")

  include_directories(Inc 
                      Drivers/${SERIES}xx_HAL_Driver/Inc
                      Drivers/${SERIES}xx_HAL_Driver/Inc/Legacy
                      Drivers/CMSIS/Device/ST/${SERIES}xx/Include
                      Drivers/CMSIS/Include Inc)

  add_executable(${PROJECT_NAME}.elf ${SOURCES} ${LINKER_SCRIPT})
  target_link_libraries(${PROJECT_NAME}.elf m)

  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map")

  set(HEX_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex)
  set(BIN_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin)

  add_custom_command( TARGET ${PROJECT_NAME}.elf POST_BUILD
                      COMMAND ${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}
                      COMMAND ${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}
                      COMMENT "Building ${HEX_FILE}
                      Building ${BIN_FILE}")

endif()





# --------------------------------------------------------------------
# Definitions application


# -------------------------------------------------
# Application CFG

if(APP_CFG_REMOTEFILE_FEATURE               OR
   APP_CFG_GENERAL_FEATURE                  OR 
   APP_CFG_LOG_FEATURE                      OR
   APP_CFG_INTERNETSERVICES_FEATURE         OR 
   APP_CFG_DYNDNSMANAGER_FEATURE            OR
   APP_CFG_WEBSERVER_FEATURE                OR
   APP_CFG_CHECKRESOURCESHARDWARE_FEATURE   OR
   APP_CFG_LOCATION_FEATURE                 OR
   APP_CFG_DNSRESOLVED_FEATURE              OR
   APP_CFG_ALERTS_FEATURE                   OR
   APP_CFG_APPUPDATE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPCFG.cpp")      
endif()

if(APP_CFG_LOG_FEATURE)
  set(XLOG_FEATURE                                        true    CACHE BOOL "Activate LOG File"                                          FORCE)
endif()

if(APP_FEATURE)
  add_definitions(-DAPP_ACTIVE)
endif()

if(APP_CFG_REMOTEFILE_FEATURE)
  add_definitions(-DAPP_CFG_REMOTEFILE_ACTIVE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIORemoteFileCFG.cpp")
  set(DIO_WEBCLIENT_FEATURE                               true    CACHE BOOL "Activate Web Client"                                        FORCE)
endif()

if(APP_CFG_GENERAL_FEATURE)
  add_definitions(-DAPP_CFG_GENERAL_ACTIVE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_LOG_FEATURE)
  add_definitions(-DAPP_CFG_LOG_ACTIVE)  
  set(APP_LOG_FEATURE                                     true    CACHE BOOL "Activate Application Log"                                   FORCE)
  set(XLOG_FEATURE                                        true    CACHE BOOL "Activate LOG File"                                          FORCE)  
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_INTERNETSERVICES_FEATURE)
  add_definitions(-DAPP_CFG_INTERNETSERVICES_ACTIVE)
  set(HASH_FEATURE                                        true    CACHE BOOL "Activate HASH"                                              FORCE)
  set(APP_INTERNETSERVICES_FEATURE                        true    CACHE BOOL "Activate Application Internet Services"                     FORCE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_DYNDNSMANAGER_FEATURE)
  add_definitions(-DAPP_CFG_DYNDNSMANAGER_ACTIVE)
endif()

if(APP_CFG_WEBSERVER_FEATURE)
  add_definitions(-DAPP_CFG_WEBSERVER_ACTIVE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_CHECKRESOURCESHARDWARE_FEATURE)
  add_definitions(-DAPP_CFG_CHECKRESOURCESHARDWARE_ACTIVE)
  set(APP_CHECKRESOURCESHARDWARE_FEATURE                  true   CACHE BOOL "Activate Application Check Resources Hardwar"                FORCE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_LOCATION_FEATURE)
  add_definitions(-DAPP_CFG_LOCATION_ACTIVE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_DNSRESOLVED_FEATURE)
  add_definitions(-DAPP_CFG_DNSRESOLVED_ACTIVE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_ALERTS_FEATURE)
  add_definitions(-DAPP_CFG_ALERTS_ACTIVE)
  set(APP_ALERTS_FEATURE                                  true    CACHE BOOL "Activate Application Alerts"                                FORCE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()

if(APP_CFG_APPUPDATE_FEATURE)
  add_definitions(-DAPP_CFG_APPUPDATE_ACTIVE)
  set(APP_UPDATE_FEATURE                                  true    CACHE BOOL "Activate Application Update"                                FORCE)
  set(XFILE_CFG_FEATURE                                   true    CACHE BOOL "Activate XFile Config format"                               FORCE)
endif()


# -------------------------------------------------
# Special XSYSTEM Linux

if(COMPILE_TO_LINUX)
  set(XPROCESSMANAGER_FEATURE                             true    CACHE BOOL "Activate Process Manager"                                   FORCE)
endif()



# -------------------------------------------------
# Utils
          
if(XTRACE_FEATURE)

  add_definitions(-DXTRACE_ACTIVE)

  if(XTRACE_NOINTERNET_FEATURE)
    add_definitions(-DXTRACE_NOINTERNET)  
  endif()
  
  if((COMPILE_TO_WINDOWS)  OR  (COMPILE_TO_LINUX)  OR  (COMPILE_TO_ANDROID))
    set(DIO_FEATURE                                       true    CACHE BOOL "Activate Data Input/Output"                                 FORCE)
    set(DIO_DNSRESOLVED_FEATURE                           true    CACHE BOOL "Activate DNS Resolved"                                      FORCE)
    set(DIO_WEBCLIENT_FEATURE                             true    CACHE BOOL "Activate Web Client"                                        FORCE)    
    set(DIO_SCRAPERWEB_FEATURE                            true    CACHE BOOL "Activate Scraper Web"                                       FORCE)       
  endif()

endif()  

if(XMEMORY_CONTROL_FEATURE)
  add_definitions(-DXMEMORY_CONTROL_ACTIVE)
endif()   

if(XLOG_FEATURE)  
  set(XFILE_FEATURE                                       true    CACHE BOOL "Activate XFile"                                             FORCE)  
endif()

if(XFILE_FEATURE)
  set(CIPHER_SYMMETRIC_FEATURE                            true    CACHE BOOL "Activate Cipher"                                            FORCE)  
endif()

if(XPROCESSMANAGER_FEATURE)
  add_definitions(-DXPROCESSMANAGER_ACTIVE)
endif()

if(XSHAREDMEMORYMANAGER_FEATURE)
  add_definitions(-DXSHAREDMEMORYMANAGER_ACTIVE)
endif()

if(XDRIVEIMAGEMANAGER_FEATURE)
  add_definitions(-DXDRIVEIMAGEMANAGER_ACTIVE)
endif()   

if(XEEPROMMEMORYMANAGER_FEATURE)
  add_definitions(-DXEEPROMMEMORYMANAGER_ACTIVE)
endif()



# -------------------------------------------------
# Data Input/Output     

if(DIO_FEATURE)
  add_definitions(-DDIO_ACTIVE)
  set(DIO_DNSRESOLVED_FEATURE                           true    CACHE BOOL "Activate DNS Resolved"                                        FORCE)
  set(DIO_WEBCLIENT_FEATURE                             true    CACHE BOOL "Activate Web Client"                                          FORCE)    
  set(DIO_SCRAPERWEB_FEATURE                            true    CACHE BOOL "Activate Scraper Web"                                         FORCE)       
endif()

if(DIO_WAKEONLAN_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWakeOnLAN.cpp")

  set(DIO_STREAMUDP_FEATURE                             true    CACHE BOOL "Activate Data Input/Output Stream UDP"                        FORCE)
endif()

if(DIO_MPSSE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOMPSSE.cpp")

  set(DIO_STREAMUSB_FEATURE                             true    CACHE BOOL "Activate Data Input/Output Stream USB"                        FORCE)
endif()

if(DIO_DNSRESOLVED_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODNSProtocol.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODNSResolved.cpp")
  
  set(DIO_STREAMUDP_FEATURE                             true   CACHE BOOL "Activate Data Input/Output Stream UDP"                         FORCE)
endif()


if(DIO_SCRAPERWEB_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWeb.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebCache.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebPublicIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebMACManufacturer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebSexName.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebTranslation.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebUserAgentID.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebWeather.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOScraperWebGeolocationIP.cpp")
  set(XFILE_XML_FEATURE                                 true    CACHE BOOL "Activate XFile XML format"                                  FORCE)  
  set(XFILE_JSON_FEATURE                                true    CACHE BOOL "Activate XFile JSON format"                                 FORCE)
  set(DIO_WEBCLIENT_FEATURE                             true    CACHE BOOL "Activate Web Client"                                        FORCE)
endif()

if(DIO_CHECKCONNECTIONS_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOCheckInternetConnection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOCheckTCPIPConnections.cpp")

  set(DIO_PING_FEATURE                                  true    CACHE BOOL "Activate Data Input/Output Ping"                              FORCE)
endif()

if(DIO_NETWORKTINEPROTOCOL_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIONTP.cpp")  
  set(DIO_STREAMUDP_FEATURE                             true    CACHE BOOL "Activate Data Input/Output UDP"                               FORCE)
endif()

if(DIO_DYNDNS_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODynDNS.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODynDNS_Manager.cpp")    
  
  set(DIO_WEBCLIENT_FEATURE                             true    CACHE BOOL "Activate Web Client"                                          FORCE)
endif()

if(DIO_PING_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPing.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPing_XEvent.cpp")

  set(DIO_STREAMICMP_FEATURE                            true     CACHE BOOL "Activate Data Input/Output ICMP"                             FORCE)  
endif()

if(DIO_WEBCLIENT_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebHeader.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebClient.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebClient_XEvent.cpp")   

  set(DIO_STREAMTCPIP_FEATURE                           true     CACHE BOOL "Activate Data Input/Output TCPIP"                            FORCE)  
  set(HASH_MD5_FEATURE                                  true     CACHE BOOL "Activate Hash MD5"                                           FORCE)
endif()

if(DIO_STREAMUART_FEATURE         OR 
   DIO_STREAMUSB_FEATURE          OR 
   DIO_STREAMICMP_FEATURE         OR 
   DIO_STREAMUDP_FEATURE          OR 
   DIO_STREAMCPIP_FEATURE         OR 
   DIO_STREAMBLUETOOTH_FEATURE    OR 
   DIO_STREAMBLUETOOTHLE_FEATURE  OR 
   DIO_STREAMSPI_FEATURE          OR 
   DIO_STREAMI2C_FEATURE)

   set(DIO_STREAM_FEATURE                               true    CACHE BOOL "Activate Data Input/Output Stream"                            FORCE)
endif()

if(DIO_WEBCLIENT_FEATURE OR DIO_WEBSERVER_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebHeader.cpp")
endif()

if(DIO_WEBSERVER_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebPageHTMLCreator.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebPageHTMLCreator_XEvent.cpp")                        
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer_XEvent.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer_APIRest.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer_Plugin.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer_PluginsManager.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer_Plugin_CGI.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer_Plugin_PHP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWebServer_QueryStrings.cpp")

  set(DIO_STREAMTCPIP_FEATURE                           true    CACHE BOOL "Activate Data Input/Output TCPIP"                             FORCE)  
  set(HASH_FEATURE                                      true    CACHE BOOL "Activate HASH"                                                FORCE)  
  set(HASH_SHA1_FEATURE                                 true    CACHE BOOL "Activate Hash SHA1"                                           FORCE)    
  set(XPROCESSMANAGER_FEATURE                           true    CACHE BOOL "Activate Process Manager"                                     FORCE)
endif()
  
if(DIO_STREAMTLS_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamTLS.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamTLSConfig.cpp") 
  
  set(DIO_STREAMTCPIP_FEATURE                           true    CACHE BOOL "Activate Data Input/Output TCPIP"                             FORCE)    
  set(HASH_FEATURE                                      true    CACHE BOOL "Activate XTrace"                                              FORCE)
  set(CIPHER_SYMMETRIC_FEATURE                          true    CACHE BOOL "Activate Cipher Symetric"                                     FORCE)
  set(CIPHER_ASYMMETRIC_FEATURE                         true    CACHE BOOL "Activate Cipher Asymetric"                                    FORCE)
endif()

if(DIO_STREAMUART_FEATURE)
  add_definitions(-DDIOUART_ACTIVE)
endif()

if(DIO_STREAMUSB_FEATURE)
  add_definitions(-DDIOUSB_ACTIVE)
endif()

if(DIO_STREAMBLUETOOTH_FEATURE)
  add_definitions(-DDIOBLUETOOTH_ACTIVE)  
  set(XUUID_FEATURE                                     true    CACHE BOOL "Activate UUID functions"                                    FORCE)

endif()

if(DIO_STREAMBLUETOOTHLE_FEATURE)
  add_definitions(-DDIOBLUETOOTHLE_ACTIVE)
endif()

if(DIO_STREAMI2C_FEATURE)
  add_definitions(-DDIOI2C_ACTIVE)   
endif()

if(DIO_STREAMSPI_FEATURE)
  add_definitions(-DDIOSPI_ACTIVE)
endif()

if(DIO_STREAMICMP_FEATURE)
  add_definitions(-DDIOICMP_ACTIVE)
endif()

if(DIO_STREAMUDP_FEATURE)
  add_definitions(-DDIOUDP_ACTIVE)
endif()

if(DIO_STREAMTCPIP_FEATURE)
  add_definitions(-DDIOTCPIP_ACTIVE)
endif()

if(DIO_STREAMWIFI_FEATURE)
  add_definitions(-DDIOWIFI_ACTIVE)
endif()

if(DIO_WIFIMANAGERMODE_FEATURE)
  add_definitions(-DDIOWIFIMANAGERMODE_ACTIVE)
endif()

if(DIO_PING_FEATURE)
  add_definitions(-DDIOPING_ACTIVE)
endif()

if(DIO_PCAP_FEATURE)
  add_definitions(-DDIOPCAP_ACTIVE)
endif()

if(DIO_GPIO_FEATURE)
  add_definitions(-DDIOGPIO_ACTIVE)
  if(DIO_GPIO_PCPARALLEL_FEATURE)
    add_definitions(-DDIO_GPIO_PCPARALLEL_ACTIVE)
  endif()
endif()

if(DIO_ALERTS_FEATURE)
  add_definitions(-DDIOALERTS_ACTIVE)
endif()

if(DIO_LEDNEOPIXELWS2812B_FEATURE)
  add_definitions(-DDIOLEDNEOPIXELWS2812B_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOLedNeoPixelWS2812B.cpp") 
endif()


# -------------------------------------------------
# Databases

if(DATABASES_SQL_SQLITE_FEATURE)
  add_definitions(-DDB_SQLITE_ACTIVE)
  set(DATABASES_SQL                                     true    CACHE BOOL "Activate DataBases SQL"                                       FORCE)
endif()

if(DATABASES_SQL_MYSQL_FEATURE)  
  add_definitions(-DDB_MYSQL_ACTIVE)
  set(DATABASES_SQL                                     true    CACHE BOOL "Activate DataBases SQL"                                       FORCE)
endif()

if(DATABASES_SQL_POSTGRESQL_FEATURE)  
  add_definitions(-DDB_POSTGRESQL_ACTIVE)
  set(DATABASES_SQL                                     true    CACHE BOOL "Activate DataBases SQL"                                       FORCE)
endif()

if(DATABASES_SQL_FEATURE)
  add_definitions(-DDB_SQL_ACTIVE)
endif()



# -------------------------------------------------
# Graphics 

if(GRP_FEATURE)
  add_definitions(-DGRP_ACTIVE)
  add_definitions(-DFT_DEBUG_LEVEL_ERROR)
  add_definitions(-DFT_DEBUG_LEVEL_TRACE)
  add_definitions(-DFT2_BUILD_LIBRARY)
endif()

if(GRP_OPENGL_FEATURE)
  add_definitions(-DGRP_OPENGL_ACTIVE)
endif()



# -------------------------------------------------
# Input 

if(INP_FEATURE)
  add_definitions(-DINP_ACTIVE)
endif()



# -------------------------------------------------
# Sound 

if(SND_FEATURE)
  add_definitions(-DSND_ACTIVE)
endif()



                         
# --------------------------------------------------------------------
# Sources        
# --------------------------------------------------------------------

            
# -------------------------------------------------
# MainProc               
                         
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_MAINPROC}/MainProc.cpp")
 

# -------------------------------------------------
# Application   


if(APP_CONSOLE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPConsole.cpp")    
endif()
           
if(APP_GRAPHICS_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPGraphics.cpp")    
endif()

if(APP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPBase.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPMain.cpp")
endif()
                                 
if(APP_CHECKRESOURCESHARDWARE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPCheckResourcesHardware.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPCheckResourcesHardware_XEvent.cpp")    
  set(XSCHEDULER_FEATURE                                  true    CACHE BOOL "Activate XScheduler"                                        FORCE)  
endif()

if(APP_INTERNETSERVICES_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPInternetServices.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPInternetServices_XEvent.cpp")  
  set(XSCHEDULER_FEATURE                                  true    CACHE BOOL "Activate XScheduler"                                        FORCE)  
endif()

if(APP_LOG_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPLog.cpp")                         
endif()

if(APP_WEBSERVER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPWebServer.cpp")  
endif()

if(APP_UPDATE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPUpdate.cpp")  
  set(DIO_APPLICATIONUPDATE_FEATURE                     true   CACHE BOOL "Activate Data Input/Output Application Update"                 FORCE)
endif()

if(APP_ALERTS_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPAlerts.cpp")  
endif()



# -------------------------------------------------
# Graphics

if(GRP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPScreen.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPViewPort.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPXEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPProperties.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmap.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapSequence.cpp")


  if(GRP_FILE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFile.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileBMP.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileJPG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFilePNG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileTGA.cpp")

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPVideoFile.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPVideoFileAVI.cpp")
    
    set(XFILE_RIFF_FEATURE                                  true    CACHE BOOL "Activate XFile RIFF format"                                 FORCE)  
    
  endif()


  if(GRP_2D_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRPCanvas.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DVertexs.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DRebuildAreas.cpp")

  endif()

endif()


# -------------------------------------------------
# Scripts

if(USERINTERFACE_FEATURE)

  if(USERINTERFACE_DEBUG_FEATURE)
    add_definitions("-DUSERINTERFACE_DEBUG")
  endif()

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Color.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Colors.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Text.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Texts.cpp")    
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Animation.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Animations.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_BoundaryLine.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Property_Selectable.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Property_Editable.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Property_Scrolleable.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Text.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Image.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Animation.cpp")    
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Option.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_MultiOption.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Button.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_CheckBox.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_TextBox.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_EditText.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Form.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Menu.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_ListBox.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_ProgressBar.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Scroll.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_ControlTransition.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_VirtualKeyBoard.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Layout.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Manager.cpp")
  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_Skin.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_SkinCanvas.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_SkinCanvas_Flat.cpp")
  
endif()


# -------------------------------------------------
# Scripts

if(SCRIPT_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Lib.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_LibFunction.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_G.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_IO.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Math.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Path.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Rand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_String.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Timer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_System.cpp")

  if(SCRIPT_LUA_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Lua.cpp")
  endif()

  if(SCRIPT_JAVASCRIPT_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Javascript.cpp")
  endif()

endif()



# -------------------------------------------------
# Databases

if(DATABASES_SQL_SQLITE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Result.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_SQLITE}/sqlite3.c")
endif()


if(DATABASES_SQL_MYSQL_FEATURE)

  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_MYSQL})  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Result.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Variant.cpp")

endif()


if(DATABASES_SQL_POSTGRESQL_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Result.cpp")
endif()


if(DATABASES_SQL_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Factory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Error.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Result.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Variant.cpp")
endif()



# -------------------------------------------------
# Graphics

if(GRP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPScreen.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPViewPort.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPXEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPProperties.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmap.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapSequence.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFrameRate.cpp")

  if(GRP_FILE_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFile.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileBMP.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileJPG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFilePNG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileTGA.cpp")
  endif()


  if(GRP_2D_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRPCanvas.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DVertexs.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DRebuildAreas.cpp")
  endif()
endif()



# -------------------------------------------------
# Inputs

if(INP_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPManager.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPFactoryDevices.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPDevice.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPButton.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPCursor.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPCursorMotion.cpp")
endif()



# -------------------------------------------------
# Data Input/Output

if(DIO_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOMAC.cpp")

  set(DIO_NOTIFICATIONS_MANAGER_FEATURE                 true   CACHE BOOL "Activate Notifications Nanager"                                FORCE)

endif()


if(DIO_WIFIMANAGERMODE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWifiManagerMode.cpp")

  set(DIO_STREAMTCPIP_FEATURE                           true   CACHE BOOL "Activate Data Input/Output Stream TCPIP"                       FORCE)
endif()


if(DIO_NOTIFICATIONS_MANAGER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIONotificationsManager.cpp")
endif()

if(DIO_PROTOCOL_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOProtocol_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOProtocol.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOProtocol_ApplicationData.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOProtocol_ConnectionsManager_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOProtocol_ConnectionsManager.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOProtocol_ApplicationData.cpp")

  set(DIO_STREAMCIPHER_FEATURE                          true   CACHE BOOL "Activate Data Input/Output Stream Cipher"                      FORCE)
  set(DIO_STREAMUDP_FEATURE                             true   CACHE BOOL "Activate Data Input/Output Stream UDP"                         FORCE)
  set(CIPHER_SYMMETRIC_AES_FEATURE                      true   CACHE BOOL "Activate Cipher Symetric AES"                                  FORCE)
endif()


if(DIO_STREAMCIPHER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamCipher.cpp")

  set(HASH_FEATURE                                      true   CACHE BOOL "Activate Hash"                                                 FORCE)
  set(CIPHER_SYMMETRIC_FEATURE                          true   CACHE BOOL "Activate Cipher Symetric"                                      FORCE)
endif()

if(DIO_ALERTS_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOAlerts.cpp")  
  
  set(DIO_ATCMD_FEATURE                                 true   CACHE BOOL "Activate AT Commands"                                          FORCE)
  set(DIO_SMTP_FEATURE                                  true   CACHE BOOL "Activate SMTP (email)"                                         FORCE) 
  set(DIO_WEBCLIENT_FEATURE                             true   CACHE BOOL "Activate Web Client"                                           FORCE)
  set(DIO_STREAMUDP_FEATURE                             true   CACHE BOOL "Activate Data Input/Output Stream UDP"                         FORCE)
endif()

if(DIO_SMTP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOSMTP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOEmailAddress.cpp")

  set(DIO_STREAMTCPIP_FEATURE                           true   CACHE BOOL "Activate Data Input/Output Stream TCPIP"                       FORCE)
endif()

if(DIO_SNMP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOSNMP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XBER.cpp")
endif()

if(DIO_ATCMD_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOATCMDS.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOATCMDGSM.cpp")   

  set(DIO_STREAMUART_FEATURE                            true   CACHE BOOL "Activate Data Input/Output Stream UART"                        FORCE)
endif()


if(DIO_STREAM_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODevice.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStream.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamDevice.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamEnumDevices.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamEnumServers.cpp")
  
  set(XPUBLISHER_FEATURE                                  true    CACHE BOOL "Activate XPublisher"                                        FORCE)
  set(XFSMACHINE_FEATURE                                  true    CACHE BOOL "Activate XFSMachine"                                        FORCE)
endif()

if(DIO_STREAMUART_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUART.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUARTConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUARTLocalEnumDevices.cpp")
endif()

if(DIO_STREAMUSB_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUSB.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUSBConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamDeviceUSB.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUSBLocalEnumDevices.cpp")
endif()

if(DIO_STREAMBLUETOOTH_FEATURE OR DIO_STREAMBLUETOOTHLE_FEATURE) 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamBluetooth.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamBluetoothConfig.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamDeviceBluetooth.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamEnumBluetoothDevices.cpp")      
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamBluetoothLocalEnumDevices.cpp")    
  
endif()

if (DIO_STREAMBLUETOOTH_FEATURE) 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamBluetoothRemoteEnumDevices.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamDeviceBluetooth.cpp")  
endif()

if(DIO_STREAMBLUETOOTHLE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamBluetoothLERemoteEnumDevices_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamBluetoothLERemoteEnumDevices.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamDeviceBluetoothLE.cpp")  
endif()

if(DIO_STREAMI2C_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODeviceI2C.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamI2C.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamI2CConfig.cpp")  
  
  if(DIO_I2C_6AXISTRACKING_LSM303DLHC_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2C6AxisTrackingLSM303DLHC.cpp")
  endif()
  if(DIO_I2C_6AXISTRACKING_BMI270_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2C6AxisTrackingBMI270.cpp")
  endif()
  if(DIO_I2C_9AXISTRACKING_MPU9150_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2C9AxisTrackingMPU9150.cpp")
  endif()
  if(DIO_I2C_ADDACONVERTER_PCF8591_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CADDAConverterPCF8591.cpp")
  endif()
  if(DIO_I2C_AIRQUALITY_CCS811_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CAirQualityCCS811.cpp") 
  endif()
  if(DIO_I2C_EEPROM_24XXX_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CEEprom24XXX.cpp")  
  endif()
  if(DIO_I2C_GPIO_MCP2317_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CGPIOMCP2317.cpp")
  endif()
  if(DIO_I2C_GPIO_PCF8574_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CGPIOPCF8574.cpp")
  endif()
  if(DIO_I2C_LIGHTSENSOR_TSL2561_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CLightSensorTSL2561.cpp")
  endif()
  if(DIO_I2C_OLEDDISPLAY_SSD1306_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2COLEDDisplaySSD1306.cpp")
    set(DIO_DISPLAYDEVICE_FEATURE                           true    CACHE BOOL "Activate Data Input/Output Display Device"                  FORCE)
  endif()
  if(DIO_I2C_PWMCONTROLER_PCA9685_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CPWMControlerPCA9685.cpp")
  endif()
  if(DIO_I2C_TEMHUMSENSOR_AM2315_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CTemHumSensorAM2315.cpp")
  endif()
  if(DIO_I2C_TEMHUMSENSOR_SHT20_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CTemHumSensorSHT20.cpp")
  endif()
  if(DIO_I2C_MONITORGAUGE_LTC2942_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CMonitorGaugeLTC2942.cpp")
  endif()
  if(DIO_I2C_BATTERYCHARGER_BQ24295_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CBatteryChargerBQ24295.cpp")
  endif()
  if(DIO_I2C_TOUCHSENSOR_AT42QT1060_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_I2C}/DIOI2CTouchSensorAT42QT1060.cpp")
  endif()
endif()

if(DIO_STREAMSPI_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODeviceSPI.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamSPI.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamSPIConfig.cpp") 
  if(DIO_SPI_GPIO_MCP23S17_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SPI}/DIOSPIGPIOMCP23S17.cpp")
  endif()
  if(DIO_SPI_LCDDISPLAY_PCF8833_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SPI}/DIOSPILCDDisplayPCF8833.cpp")    
    set(DIO_DISPLAYDEVICE_FEATURE                           true    CACHE BOOL "Activate Data Input/Output Display Device"                  FORCE)
  endif()
  if(DIO_SPI_OLEDDISPLAY_SSD1306_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SPI}/DIOSPIOLEDDisplaySSD1306.cpp")
    set(DIO_DISPLAYDEVICE_FEATURE                           true    CACHE BOOL "Activate Data Input/Output Display Device"                  FORCE)
  endif()
  if(DIO_SPI_OLEDDISPLAY_SSD1331_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SPI}/DIOSPIOLEDDisplaySSD1331.cpp")
    set(DIO_DISPLAYDEVICE_FEATURE                           true    CACHE BOOL "Activate Data Input/Output Display Device"                  FORCE)
  endif()
  if(DIO_SPI_TFTDISPLAY_ILI9341_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SPI}/DIOSPITFTDisplayILI9341.cpp")
    set(DIO_DISPLAYDEVICE_FEATURE                           true    CACHE BOOL "Activate Data Input/Output Display Device"                  FORCE)
  endif()
  if(DIO_SPI_TFTDISPLAY_ST7789_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SPI}/DIOSPITFTDisplayST7789.cpp")
    set(DIO_DISPLAYDEVICE_FEATURE                           true    CACHE BOOL "Activate Data Input/Output Display Device"                  FORCE)
  endif()
  if(DIO_SPI_TOUCHSCREEN_STMPE610_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SPI}/DIOSPITouchScreenSTMPE610.cpp")
  endif()
endif()

if(DIO_DISPLAYDEVICE_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODisplayDevice.cpp")
endif()


if(DIO_STREAMICMP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamICMP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamICMPConfig.cpp")
endif()

if(DIO_STREAMUDP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUDP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUDPConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUDPLocalEnumServers.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamUDPAcknowledge.cpp")  
  
  set(HASH_FEATURE                                      true    CACHE BOOL "Activate HASH"                                                FORCE)
  set(HASH_CRC32_FEATURE                                true    CACHE BOOL "Activate Hash CRC32"                                          FORCE)
endif()

if(DIO_STREAMTCPIP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamTCPIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamTCPIPConfig.cpp") 
endif()

if(DIO_STREAMWIFI_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamDeviceWifi.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamWifiRemoteEnumDevices.cpp")
endif()

if(DIO_STREAMUDP_FEATURE OR DIO_STREAMTCPIP_FEATURE OR DIO_STREAMWIFI_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOURL.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamDeviceIP.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamIPLocalEnumDevices.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOStreamConfigString.cpp")
endif()

if(DIO_GPIO_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOGPIO.cpp")
endif()
  
if(DIO_PCAP_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPCap.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPCapEX.cpp")  
endif()

if(DIO_APPLICATIONUPDATE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOApplicationUpdate_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOApplicationUpdate.cpp")
  set(XPROCESSMANAGER_FEATURE                           true    CACHE BOOL "Activate Process Manager"                                     FORCE)
endif()



# -------------------------------------------------
# Sound 

if(SND_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFactory.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDElement.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDInstance.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDSource.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SND_XEvent.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDStreamInstance.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDStreamElement.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDCodec.cpp")    

  set(SND_FILE_WAV_FEATURE                                true    CACHE BOOL "Activate Sound WAV file"                                    FORCE)
  set(SND_FILE_OGG_FEATURE                                true    CACHE BOOL "Activate Sound OGG file"                                    FORCE)
endif()


if(SND_FILE_OGG_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFile.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFileOGG.cpp")  
endif()

if(SND_FILE_WAV_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFileBase.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFileWAV.cpp")  
endif()


# -------------------------------------------------
# Utils

list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XBase.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XMemory_Control.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XString.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XBuffer.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XVariant.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XPath.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XTrace.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XRect.cpp")

list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XTimer.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XDateTime.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XRand.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XDir.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XConsole.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XThread.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFactory.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XSleep.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XSystem.cpp")

if(XFSMACHINE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFSMachine.cpp")
endif()  

if(XSCHEDULER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XScheduler.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XScheduler_XEvent.cpp")
endif()

if(XPUBLISHER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XPublisher.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XSubject.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XObserver.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XEvent.cpp")
endif()


if(XUUID_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XUUID.cpp")
  set(HASH_FEATURE                                        true    CACHE BOOL "Activate Hash"                                              FORCE)
  set(HASH_CRC32_FEATURE                                true    CACHE BOOL "Activate Hash CRC32"                                          FORCE)
endif()

if(XLOG_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XLog.cpp")
  add_definitions(-DXLOG_ACTIVE)
  set(XFILE_ZIP_FEATURE                                   true    CACHE BOOL "Activate XFile Zip format"                                  FORCE)
endif()

list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XPathsManager.cpp")

if(XTRANSLATION_FEATURE)
  set(XFILE_JSON_FEATURE                                  true    CACHE BOOL "Activate XFile JSON format"                                 FORCE)
  set(XTRANSLATION_GEN_FEATURE                            true    CACHE BOOL "Activate Translation"                                       FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XTranslation.cpp")  
endif()

if(XTRANSLATION_GEN_FEATURE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XLanguage_ISO_639_3.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XTranslation_GEN.cpp")
endif()


if(XPROCESSMANAGER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XProcessManager.cpp")
endif()

if(XSHAREDMEMORYMANAGER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XSharedMemoryManager.cpp")
endif()

if(XDRIVEIMAGEMANAGER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XDriveImageManager.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XDriveImageManager_XEvent.cpp")
endif()

if(XEEPROMMEMORYMANAGER_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XEEPROMMemoryManager.cpp")
endif()

if(APP_CFG_LOCATION_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XLocationAddress.cpp")
endif()

if(XFILE_CFG_FEATURE) 
  set(XFILE_INI_FEATURE                                   true    CACHE BOOL "Activate XFile INI format"                                  FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileCFG.cpp")
endif()

if(XFILE_INI_FEATURE) 
  set(XFILE_TXT_FEATURE                                   true    CACHE BOOL "Activate XFile Text format"                                 FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileINI.cpp")
endif()

if(XFILE_ZIP_FEATURE) 
  set(XFILE_FEATURE                                       true    CACHE BOOL "Activate XFile"                                             FORCE)     
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileZIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileZIP_XEvent.cpp")  
endif()  
  
if(XFILE_XML_FEATURE) 
  set(XFILE_TXT_FEATURE                                   true    CACHE BOOL "Activate XFile Text format"                                 FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileXML.cpp")
endif()  
  
if(XFILE_JSON_FEATURE)  
  set(XFILE_TXT_FEATURE                                   true    CACHE BOOL "Activate XFile Text format"                                 FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileJSON.cpp")
endif()

if(XFILE_RIFF_FEATURE) 
  set(XFILE_FEATURE                                       true    CACHE BOOL "Activate XFile"                                             FORCE)     
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileRIFF.cpp")
endif()
    
if(XFILE_HEX_FEATURE)  
  set(XFILE_TXT_FEATURE                                   true    CACHE BOOL "Activate XFile Text format"                                 FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileHEX.cpp")
endif()
  
if(XFILE_DFU_FEATURE)  
  set(XFILE_FEATURE                                       true    CACHE BOOL "Activate XFile"                                             FORCE)     
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileDFU.cpp")  
endif()  

if(XFILE_TXT_FEATURE)
  set(XFILE_FEATURE                                       true    CACHE BOOL "Activate XFile"                                             FORCE)     
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFileTXT.cpp")
endif()    
  
if(XFILE_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XFile.cpp")
  set(CIPHER_SYMMETRIC_FEATURE                            true    CACHE BOOL "Activate Cipher Symetric"                                   FORCE)
  set(CIPHER_ASYMMETRIC_FEATURE                           true    CACHE BOOL "Activate Cipher Asymetric"                                  FORCE)
endif()  



if(XLICENSE_FEATURE)
  set(CIPHER_SYMMETRIC_FEATURE                            true    CACHE BOOL "Activate Cipher Symetric"                                   FORCE)
  set(CIPHER_SYMMETRIC_AES_FEATURE                        true    CACHE BOOL "Activate Cipher Symetric AES"                               FORCE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XLicense.cpp")
endif()



# -------------------------------------------------
# Cipher

if(HASH_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/Hash.cpp")
    
  if(HASH_CRC16_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCRC16.cpp")
  endif()
  if(HASH_CKS16_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCKS16.cpp")
  endif()
  if(HASH_CRC32_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCRC32.cpp")
  endif()
  if(HASH_MD5_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHMD5.cpp")
  endif()
  if(HASH_SHA1_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHSHA1.cpp")
  endif()
  if(HASH_SHA2_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHSHA2.cpp")
  endif()
  if(HASH_COMP128V1_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HashCOMP128v1.cpp")
  endif()
  if(HASH_WHIRLPOOL_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHWhirlpool.cpp")
  endif()   
endif()


if(CIPHER_SYMMETRIC_FEATURE OR CIPHER_ASYMMETRIC_FEATURE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/Cipher.cpp")  
endif()

if(CIPHER_SYMMETRIC_FEATURE)
  if(CIPHER_SYMMETRIC_DES_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherDES.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/Cipher3DES.cpp")
  endif()
  if(CIPHER_SYMMETRIC_AES_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherAES.cpp")
  endif()
  if(CIPHER_SYMMETRIC_BLOWFISH_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherBlowfish.cpp")
  endif()
endif()


if(CIPHER_ASYMMETRIC_FEATURE)  
  if(CIPHER_ASYMMETRIC_RSA_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherRSA.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherFileKeys.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XMPInteger.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_UTILS}/XBER.cpp")
  endif()
endif()


# -------------------------------------------------
# Platforms


# -------------------------------------------------
# Common

if(SND_FEATURE)

  if((${CMAKE_SYSTEM_NAME} MATCHES "Windows") OR (${CMAKE_SYSTEM_NAME} MATCHES "Linux"))

    if(SND_FEATURE)
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDFactory_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDBuffer_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDElement_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDSource_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDStreamElement_OpenAL.cpp")
    endif()

  endif()

endif()



# -------------------------------------------------
# Windows

if(COMPILE_TO_WINDOWS)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/MainProcWINDOWS.cpp")

  if(GRP_FEATURE)       
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/GRPWINDOWSFactory.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/GRPWINDOWSScreen.cpp")
  endif()

  if(INP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSFactoryDevices.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSDeviceMouse.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSDeviceKeyboard.cpp")
  endif()

  if(DIO_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSFactory.cpp")
  endif()

  if(DIO_PING_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSPing.cpp")
  endif()

  if(DIO_STREAMUART_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUART.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUARTLocalEnumDevices.cpp")
  endif()

  if(DIO_STREAMUSB_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUSB.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUSBLocalEnumDevices.cpp")
  endif()

  if(DIO_STREAMI2C_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamI2C.cpp")    
  endif()

  if(DIO_STREAMSPI_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamSPI.cpp")    
  endif()

  if(DIO_STREAMICMP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamICMP.cpp")
  endif()
  
  if(DIO_STREAMUDP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUDP.cpp")    
  endif()

  if(DIO_STREAMTCPIP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamTCPIP.cpp") 
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamIPLocalEnumDevices.cpp")
  endif()

  if(DIO_STREAMBLUETOOTH_FEATURE OR DIO_STREAMBLUETOOTHLE_FEATURE)            
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetooth.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetoothLocalEnumDevices.cpp")      
  endif()

  if(DIO_STREAMBLUETOOTH_FEATURE)            
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetoothRemoteEnumDevices.cpp")
  endif()

  if(DIO_STREAMBLUETOOTHLE_FEATURE)            
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetoothLERemoteEnumDevices.cpp")
  endif()

  if(DIO_STREAMWIFI_FEATURE)            
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamWifiRemoteEnumDevices.cpp")    
  endif()

  if(DIO_WIFIMANAGERMODE_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSWifiManagerMode.cpp")
  endif()

  if(DIO_GPIO_FEATURE)
    if(DIO_GPIO_PCPARALLEL_FEATURE)
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSGPIOPCParallel.cpp") 
    endif()
  endif()

  if(DIO_PCAP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSPCap.cpp")      
  endif()

   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSTrace.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSTimer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSRand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSDir.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSThread.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSDateTime.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSSystem.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSSleep.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSConsole.cpp")

  if(XFILE_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSFile.cpp")
  endif()

  if(XPROCESSMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSProcessManager.cpp")
  endif()

  if(XSHAREDMEMORYMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSSharedMemoryManager.cpp")
  endif()

  if(XDRIVEIMAGEMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSDriveImageManager.cpp")
  endif()

  if(XEEPROMMEMORYMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSEEPROMMemoryManager.cpp")
  endif()
  
  if(DIO_NOTIFICATIONS_MANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSNotificationsManager.cpp")
  endif()

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSAccessControlLists.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSServiceBase.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSRegistryManager.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSWMIInterface.cpp")    
  
  if(X_WINDOWS_VIRTUALDESKTOPMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSVirtualDesktopManager.cpp")
  endif()

endif()



# -------------------------------------------------
# Linux

if(COMPILE_TO_LINUX)
  
  if(GRP_FEATURE)       
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/GRPLINUXFactory.cpp")    
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/GRPLINUXScreenX11.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/GRPLINUXScreenFrameBuffer.cpp")    
  endif()

  if(INP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXFactoryDevices.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceID.cpp")

    if(LINUX_X11_FEATURE) 
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceKeyboardX11.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceMouseX11.cpp")    
    else()
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceKeyboardDirect.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceMouseDirect.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceTouchScreenDirect.cpp")
    endif()     
  endif()

 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/MainProcLINUX.cpp")

  if(DIO_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXFactory.cpp")
  endif()

  if(DIO_PING_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXPing.cpp")
  endif()

  if(DIO_STREAMUART_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUART.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUARTLocalEnumDevices.cpp")
  endif()

  if(DIO_STREAMUSB_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUSB.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUSBLocalEnumDevices.cpp")
  endif()

  if(DIO_STREAMI2C_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamI2C.cpp")    
  endif()

  if(DIO_STREAMSPI_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamSPI.cpp")    
  endif()

  if(DIO_STREAMICMP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamICMP.cpp")
  endif()
  
  if(DIO_STREAMUDP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUDP.cpp")    
  endif()

  if(DIO_STREAMTCPIP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamTCPIP.cpp") 
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamIPLocalEnumDevices.cpp")
  endif()

  if(DIO_STREAMBLUETOOTH_FEATURE OR DIO_STREAMBLUETOOTHLE_FEATURE)            
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetooth.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetoothLocalEnumDevices.cpp")      
  endif()

  if(DIO_STREAMBLUETOOTH_FEATURE)            
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetoothRemoteEnumDevices.cpp")
  endif()

  if(DIO_STREAMBLUETOOTHLE_FEATURE)            
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetoothLERemoteEnumDevices.cpp")
  endif()

  if(DIO_STREAMWIFI_FEATURE)        
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamWifiRemoteEnumDevices.cpp")
  endif()

  if(DIO_WIFIMANAGERMODE_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXWifiManagerMode.cpp")
  endif()
  
  if(DIO_PCAP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXPCap.cpp")      
  endif()

  if(DIO_GPIO_FEATURE)    
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIO.cpp")

    if(${TARGET} MATCHES "raspberrypi")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIORaspberryPi.cpp")
    else()
      if((${TARGET} MATCHES "nxp_imx6") OR (${TARGET} MATCHES "nxp_imx8"))       
        list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIONXPiMX.cpp")
      endif()  
      if(DIO_GPIO_PCPARALLEL_FEATURE)
		    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIOPCParallel.cpp")
      endif()  
    endif()   
  endif()

  if(DIO_LEDNEOPIXELWS2812B_FEATURE)
    if(${TARGET} MATCHES "raspberrypi")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXLedNeoPixelWS2812BRaspberryPi.cpp")
    endif()
  endif()
  
  if(DIO_LINUX_DBUS_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXDBus_XEvent.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXDBus.cpp")  
    
    if(DIO_LINUX_NETWORKMANAGER_FEATURE)         
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXNetworkManager.cpp")    
    endif()

  endif()

   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXTrace.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXTimer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXRand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXDir.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXThread.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXDateTime.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXSystem.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXSleep.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXConsole.cpp")

  if(XFILE_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXFile.cpp")
  endif()

  if(XPROCESSMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXProcessManager.cpp")
  endif()

  if(XSHAREDMEMORYMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXSharedMemoryManager.cpp")
  endif()

  if(XDRIVEIMAGEMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXDriveImageManager.cpp")
  endif()

  if(XEEPROMMEMORYMANAGER_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXEEPROMMemoryManager.cpp")
  endif()

endif()


# ----------------------------------------
# Platform Android
  
if(COMPILE_TO_ANDROID)
  
  #list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/ANDROIDJNI.cpp")
  #list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/ANDROIDJNIObject.cpp")
  #list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/ANDROIDNativeActivity.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/MainProcANDROID.cpp")


  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDTrace.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDTimer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDRand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDDir.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDThread.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDDateTime.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDSystem.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDSleep.cpp")

  
  if(XFILE_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDFile.cpp")
  endif()

endif()





# --------------------------------------------------------------------
# Library

# -------------------------------------------------
# ZLib        
          
if(SOURCES MATCHES "XFileZIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/adler32.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/compress.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/crc32.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/deflate.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/infback.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/inffast.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/inflate.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/inftrees.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/trees.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/uncompr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/zutil.c")    
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP}/ioapi.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP}/unzip.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP}/zip.c")
endif()


if(SOURCES MATCHES "DIOPCap.cpp")   

endif()



if(SOURCES MATCHES "DIOLINUXLedNeoPixelWS2812BRaspberryPi.cpp")     
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/mailbox.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/ws2811.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/pwm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/pcm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/dma.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/rpihw.c")
endif()




if(GRP_2D_FEATURE)
  
  #AGG

	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_arc.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_arrowhead.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_bezier_arc.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_bspline.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_curves.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_embedded_raster_fonts.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_gsv_text.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_image_filters.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_line_aa_basics.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_line_profile_aa.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_rounded_rect.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_sqrt_tables.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_affine.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_double_path.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_single_path.cpp")              
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_warp_magnifier.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_bspline.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_contour.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_dash.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_markers_term.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_smooth_poly1.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_stroke.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vpgen_clip_polygon.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vpgen_clip_polyline.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vpgen_segmentator.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_FREETYPE2}/agg_font_freetype.cpp")
	                    
	# FreeType2
	# FT_MODULES
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftbbox.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftbdf.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftbitmap.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftcid.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftfstype.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftgasp.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftglyph.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftgxval.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftmm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftotval.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftpatent.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftpfr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftstroke.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftsynth.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/fttype1.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftwinfnt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/autofit/autofit.c")
  # Rest Modules
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftbase.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/cache/ftccache.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftdebug.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/bdf/bdf.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/gzip/ftgzip.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/cff/cff.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftinit.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/lzw/ftlzw.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/base/ftsystem.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/pcf/pcf.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/pfr/pfr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/psaux/psaux.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/pshinter/pshinter.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/psnames/psmodule.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/raster/raster.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/sfnt/sfnt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/smooth/smooth.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/truetype/truetype.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/type1/type1.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/cid/type1cid.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/type42/type42.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/winfonts/winfnt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/cache/ftcmru.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE2_SOURCES}/cache/ftcmanag.c")
	
endif()


if(SOURCES MATCHES "GRPBitmapFileJPG.cpp")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jaricom.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcapimin.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcapistd.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcarith.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jccoefct.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jccolor.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcdctmgr.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jchuff.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcinit.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcmainct.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcmarker.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcmaster.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcomapi.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcparam.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcprepct.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcsample.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jctrans.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdapimin.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdapistd.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdarith.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdatadst.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdatasrc.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdcoefct.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdcolor.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jddctmgr.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdhuff.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdinput.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmainct.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmarker.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmaster.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmerge.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdpostct.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdsample.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdtrans.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jerror.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jfdctflt.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jfdctfst.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jfdctint.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jidctflt.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jidctfst.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jidctint.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jmemmgr.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jmemnobs.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jquant1.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jquant2.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jutils.c")
endif()


if(SOURCES MATCHES "GRPBitmapFilePNG.cpp")

	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/png.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngerror.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngget.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngmem.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngpread.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngread.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngrio.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngrtran.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngrutil.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngset.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngtrans.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwio.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwrite.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwtran.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwutil.c")	 
  
  if(COMPILE_TO_LINUX_ARM_RASPBERRYPI)
    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/arm_init.c")
    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/filter_neon_intrinsics.c")
  endif()

  if(COMPILE_TO_LINUX_ARM_NXP_IMX8)
    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/arm_init.c")
    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/filter_neon_intrinsics.c")
  endif()

endif()


if(SCRIPT_LUA_FEATURE)  
   #add_definitions(-DLUA_USE_POSIX)  
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lapi.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lauxlib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lbaselib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lbitlib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lcode.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lcorolib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lctype.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldblib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldebug.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldo.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldump.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lfunc.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lgc.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/linit.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/liolib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/llex.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lmathlib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lmem.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/loadlib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lobject.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lopcodes.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/loslib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lparser.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lstate.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lstring.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lstrlib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ltable.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ltablib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ltm.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lundump.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lutf8lib.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lvm.c")
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lzio.c")
endif() 


if(SCRIPT_JAVASCRIPT_FEATURE)
	list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_DUKTAPE}/duktape.c")
endif()


if(COMPILE_TO_WINDOWS)
  remove_definitions(-DUNICODE)
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_STACKWALKER}/StackWalker.cpp")
endif()


