# --------------------------------------------------------------------
# CMakeLists_Compile.txt to GEN FrameWork
# --------------------------------------------------------------------

#--- Set features to false -------------------------------------------

#option(COMPILE_TO_WINDOWS                                  "Compile to Windows General"                                 false )
#option(COMPILE_TO_WINDOWS_PC_32                            "Compile to Windows PC 32 Bits"                              false )
#option(COMPILE_TO_WINDOWS_PC_64                            "Compile to Windows PC 64 Bits"                              false )
#option(COMPILE_TO_LINUX                                    "Compile to Linux   General"                                 false )
#option(COMPILE_TO_LINUX_PC_64                              "Compile to Linux   PC 64 Bits"                              false )
#option(COMPILE_TO_LINUX_ARM_RASPBERRYPI                    "Compile to Linux   Rapsberry Pi"                            false )
#option(COMPILE_TO_LINUX_ARM_NXP_IMX6                       "Compile to Linux   ARM NXP imx6"                            false )
#option(COMPILE_TO_LINUX_ARM_NXP_IMX8                       "Compile to Linux   ARM NXP imx8"                            false )
#option(COMPILE_TO_ANDROID                                  "Compile to Android General"                                 false )
#option(COMPILE_TO_STM32                                    "Compile to STM32   Genral"                                  false )

#option(COMPILE_WITH_MSVC                                   "Compile with Microsoft Compiler (MSVC)"                     false )
#option(COMPILE_WITH_GCC                                    "Compile with GNU Compiler Collection (GCC)"                 false )
#option(COMPILE_WITH_CLANG                                  "Compile with CLang (front-end of LLVM)"                     false )


#--- Compile in Windows Platform -------------------------------------

 if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

   option(COMPILE_TO_WINDOWS "Compile to Windows General"  true )

   if(${TARGET} MATCHES "pc")   

     if(CMAKE_SIZEOF_VOID_P EQUAL 8)

       option(COMPILE_TO_WINDOWS_PC_64 "Compile to Windows PC 64 Bits" true )

     else()

       if(CMAKE_SIZEOF_VOID_P EQUAL 4)

         option(COMPILE_TO_WINDOWS_PC_32 "Compile to Windows PC 32 Bits" true )

      endif()

    endif()

 endif()


   if(${TARGET} MATCHES "Android")   

     option(COMPILE_TO_WINDOWS "Compile to Windows General" false )
     option(COMPILE_TO_ANDROID "Compile to Android"         true  )

   endif()


   if(${TARGET} MATCHES "STM32")

     option(COMPILE_TO_WINDOWS   "Compile to Windows General" false )
     option(COMPILE_TO_STM32_ARM "Compile to STM32"           true  )

   endif()

 endif()

# --------------------------------------------------------------------


#--- Compile in Linux Platform ---------------------------------------

 if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

   option(COMPILE_TO_LINUX    "Compile to Linux   General" true )  

   if(${TARGET} MATCHES "pc")

     option(COMPILE_TO_LINUX_PC_64 "Compile to Linux   PC 64 Bits" true )

   endif()

   if(${TARGET} MATCHES "raspberrypi")

     option(COMPILE_TO_LINUX_ARM_RASPBERRYPI  "Compile to Linux   Rapsberry Pi" true )

   endif()

   if(${TARGET} MATCHES "nxp_imx6")

     option(COMPILE_TO_LINUX_ARM_NXP_IMX6     "Compile to Linux   ARM NXP imx6" true )

   endif()

   if(${TARGET} MATCHES "nxp_imx8")

     option(COMPILE_TO_LINUX_ARM_NXP_IMX6     "Compile to Linux   ARM NXP imx6" true )

   endif()

 endif()

# --------------------------------------------------------------------

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC"))
  option(COMPILE_WITH_MSVC   "Compile with Microsoft Compiler (MSVC)"     true )
  message(STATUS "[Select for compile with Microsoft Compiler (MSVC)]")
endif()

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"))
  option(COMPILE_WITH_GCC    "Compile with GNU Compiler Collection (GCC)" true )
  message(STATUS "[Select for compile with GNU Compiler Collection (GCC)]")
endif()

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
  option(COMPILE_WITH_CLANG  "Compile with CLang (front-end of LLVM)"     true )
  message(STATUS "[Select for compile with CLang (front-end of LLVM)]")
endif()



