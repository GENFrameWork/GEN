# --------------------------------------------------------------------
# GEN_CMakeLists_Platform-Compiler.txt
# Main Part: Platform-Compiler of GEN 
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Variables assignated

# COMPILE_ON_WINDOWS              "Compile on Windows"
# COMPILE_ON_LINUX                "Compile on Linux"

# COMPILE_FOR_WINDOWS             "Compile to Windows General"
# COMPILE_FOR_WINDOWS_PC_32       "Compile to Windows PC 32 Bits"
# COMPILE_FOR_WINDOWS_PC_64       "Compile to Windows PC 64 Bits"

# COMPILE_FOR_LINUX               "Compile to Linux General"
# COMPILE_FOR_LINUX_PC_64         "Compile to Linux PC 64"

# COMPILE_FOR_LINUX_ARM           "Compile to Linux ARM"
# COMPILE_FOR_LINUX_ARM_64        "Compile to Linux ARM 64"
# COMPILE_FOR_LINUX_ARM_RPI       "Compile to Linux ARM Rapsberry Pi"
# COMPILE_FOR_LINUX_ARM_RPI_64    "Compile to Linux ARM Rapsberry Pi 64"  

# COMPILE_FOR_ANDROID             "Compile to Android General"

# COMPILE_FOR_STM32               "Compile to STM32 General"

# COMPILE_FOR_ESP32               "Compile to ESP32 General"

# --------------------------------------------------------------------

# COMPILE_WITH_MSVC               "Compile Microsoft Compiler (MSVC)"
# COMPILE_WITH_GCC                "Compile GNU Compiler Collection (GCC)"
# COMPILE_WITH_CLANG              "Compile CLang (front-end of LLVM)"


# --------------------------------------------------------------------

#option(GEN_DETECT_PLATFORM_COMPILER   "Detect Platform Compiler"    true)

# --- CACHE COMPILER ------------------------------------------------

find_program(CCACHE_PROGRAM ccache)

if(CCACHE_PROGRAM)

  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
  message(STATUS "[GEN Found CCACHE]")

endif()

message(STATUS "[GEN Target for compile: ${TARGET}]")

if("${TARGET}" STREQUAL "")

  message(STATUS "[GEN No Target for compile]")

endif()


# --- Compile in Windows Platform ------------------------------------


if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  
  option(COMPILE_ON_WINDOWS "Compile on Windows"  true)
  message(STATUS "[GEN Using Windows to compile]")

  if("${TARGET}" STREQUAL "PC") 

    add_definitions(-DWINDOWS)
    add_definitions(-DHW_PC)

    option(COMPILE_FOR_WINDOWS "Compile to Windows General"  true)

    if(CMAKE_SIZEOF_VOID_P EQUAL 8)

      option(COMPILE_FOR_WINDOWS_PC_64 "Compile to Windows PC 64 Bits" true)
      message(STATUS "[GEN Compile for platform Windows PC 64 Bits]")

    else()

      if(CMAKE_SIZEOF_VOID_P EQUAL 4)

        option(COMPILE_FOR_WINDOWS_PC_32 "Compile to Windows PC 32 Bits" true)
        message(STATUS "[GEN Compile for platform Windows PC 32 Bits]")

      endif()

    endif()

  endif()


  if("${TARGET}" STREQUAL "ANDROID")   

    add_definitions(-DANDROID)  

    option(COMPILE_FOR_ANDROID "Compile to Android" true)
    message(STATUS "[GEN Compile for platform Android]")

  endif()


  if("${TARGET}" STREQUAL "STM32")

    add_definitions(-DMICROCONTROLLER)
    add_definitions(-DHW_STM32)

    option(COMPILE_FOR_STM32 "Compile to STM32" true)
    message(STATUS "[GEN Compile for platform STM32]")

  endif()
  
  
  if("${TARGET}" STREQUAL "ESP32")
 
    add_definitions(-DMICROCONTROLLER)
    add_definitions(-DHW_ESP32)

    option(COMPILE_FOR_ESP32 "Compile to ESP32" true)
    message(STATUS "[GEN Compile for platform ESP32]")
 
  endif()

endif()


# --- Compile in Linux Platform ---------------------------------------

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

  add_definitions(-DLINUX) 

  option(COMPILE_ON_LINUX "Compile on Linux" true)  
  message(STATUS "[GEN Using Linux to compile]") 

  option(COMPILE_FOR_LINUX "Compile to Linux General" true)  

  if("${TARGET}" STREQUAL "PC") 
 
    add_definitions(-DHW_PC)    
    option(COMPILE_FOR_LINUX_PC_64 "Compile to Linux PC 64 Bits" true)
    message(STATUS "[GEN Compile for platform Linux PC 64 Bits]")

  endif()

  if("${TARGET}" STREQUAL "Raspberrypi")

    add_definitions(-DHW_RASPBERRYPI) 
    option(COMPILE_FOR_LINUX_ARM_RPI "Compile to Linux Rapsberry Pi" true)
    message(STATUS "[GEN Compile for platform Linux Raspberry Pi]")

  endif()

  if("${TARGET}" STREQUAL "Raspberrypi_64")

    add_definitions(-DHW_RASPBERRYPI)   
    option(COMPILE_FOR_LINUX_ARM_RPI_64 "Compile to Linux Rapsberry Pi 64" true)
    message(STATUS "[GEN Compile for platform Linux Raspberry Pi 64 Bits]")

  endif()   

  if("${TARGET}" STREQUAL "ARM")

    add_definitions(-DHW_ARM) 
    option(COMPILE_FOR_LINUX_ARM "Compile to Linux ARM" true)
    message(STATUS "[GEN Compile for platform Linux ARM]")

  endif()

  if("${TARGET}" STREQUAL "ARM_64")

    add_definitions(-DHW_ARM) 
    option(COMPILE_FOR_LINUX_ARM_64 "Compile to Linux ARM 64" true)
    message(STATUS "[GEN Compile for platform Linux ARM 64 Bits]")

  endif()

endif()


# --- Type of compile ------------------------------------------------

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC"))

  add_definitions(-DCOMPILER_MSVC)

  option(COMPILE_WITH_MSVC "Compile with Microsoft Compiler (MSVC)" true)
  message(STATUS "[GEN Select for compile: Microsoft Compiler (MSVC)]")

endif()

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"))

  add_definitions(-DCOMPILER_GCC)
  option(COMPILE_WITH_GCC "Compile with GNU Compiler Collection (GCC)" true)
  message(STATUS "[GEN Select for compile: GNU Compiler Collection (GCC)]")

endif()

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))

  add_definitions(-DCOMPILER_CLANG)
  option(COMPILE_WITH_CLANG "Compile with CLang (front-end of LLVM)" true)
  message(STATUS "[GEN Select for compile: CLang (front-end of LLVM)]")

endif()
