# --------------------------------------------------------------------
# CMakeLists.txt to GEN FrameWork 
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Debug / Release 
  
if(DEBUG_FEATURE)

  add_definitions(-D_DEBUG)

  set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build." FORCE)
  set(CMAKE_CONFIGURATION_TYPES Debug CACHE STRING "Choose the type of build." FORCE)    

else()

  set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
  set(CMAKE_CONFIGURATION_TYPES Release CACHE STRING "Choose the type of build." FORCE)      

endif()
  
message(STATUS "[Setting build type to ${CMAKE_BUILD_TYPE} specified]")
message(STATUS "[Setting configuration type to ${CMAKE_CONFIGURATION_TYPES} specified]")


# --------------------------------------------------------------------
# Directorys of the Application

set(GEN_DIRECTORY_SOURCES                                     "${GEN_DIRECTORY}/GEN")
set(GEN_DIRECTORY_SOURCES_COMMON                              "${GEN_DIRECTORY_SOURCES}/Common")
set(GEN_DIRECTORY_SOURCES_MAINPROC                            "${GEN_DIRECTORY_SOURCES}/MainProc")
set(GEN_DIRECTORY_SOURCES_CIPHER                              "${GEN_DIRECTORY_SOURCES}/Cipher")
set(GEN_DIRECTORY_SOURCES_COMPRESS                            "${GEN_DIRECTORY_SOURCES}/Compress")
set(GEN_DIRECTORY_SOURCES_DATAIO                              "${GEN_DIRECTORY_SOURCES}/DataIO")
set(GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS                      "${GEN_DIRECTORY_SOURCES_DATAIO}/Drivers")
set(GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C                  "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/I2C")
set(GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI                  "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/SPI")
set(GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS                    "${GEN_DIRECTORY_SOURCES_DATAIO}/Protocols")
set(GEN_DIRECTORY_SOURCES_DATAIO_STREAMS                      "${GEN_DIRECTORY_SOURCES_DATAIO}/Streams")
set(GEN_DIRECTORY_SOURCES_DATAIO_WEB                          "${GEN_DIRECTORY_SOURCES_DATAIO}/Web")
set(GEN_DIRECTORY_SOURCES_DATAIO_NODES                        "${GEN_DIRECTORY_SOURCES_DATAIO}/Nodes")
set(GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB                   "${GEN_DIRECTORY_SOURCES_DATAIO}/ScraperWeb")
set(GEN_DIRECTORY_SOURCES_GRAPHIC                             "${GEN_DIRECTORY_SOURCES}/Graphic")
set(GEN_DIRECTORY_SOURCES_GRAPHIC_2D                          "${GEN_DIRECTORY_SOURCES_GRAPHIC}/2D")
set(GEN_DIRECTORY_SOURCES_GRAPHIC_3D                          "${GEN_DIRECTORY_SOURCES_GRAPHIC}/3D")
set(GEN_DIRECTORY_SOURCES_USERINTERFACE                       "${GEN_DIRECTORY_SOURCES}/UserInterface")
set(GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN                  "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/Skin")
set(GEN_DIRECTORY_SOURCES_INPUT                               "${GEN_DIRECTORY_SOURCES}/Input")
set(GEN_DIRECTORY_SOURCES_APPLICATION                         "${GEN_DIRECTORY_SOURCES}/Application")
set(GEN_DIRECTORY_SOURCES_XUTILS                              "${GEN_DIRECTORY_SOURCES}/XUtils")
set(GEN_DIRECTORY_SOURCES_SCRIPT                              "${GEN_DIRECTORY_SOURCES}/Script")
set(GEN_DIRECTORY_SOURCES_SCRIPT_LIB                          "${GEN_DIRECTORY_SOURCES_SCRIPT}/Lib")
set(GEN_DIRECTORY_SOURCES_SOUND                               "${GEN_DIRECTORY_SOURCES}/Sound")
set(GEN_DIRECTORY_SOURCES_MEDIA                               "${GEN_DIRECTORY_SOURCES}/Media")
set(GEN_DIRECTORY_SOURCES_DATABASES                           "${GEN_DIRECTORY_SOURCES}/Databases")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL                       "${GEN_DIRECTORY_SOURCES_DATABASES}/SQL")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL                 "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/MySQL")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL            "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/PostgreSQL")
set(GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE                "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/SQLite")
set(GEN_DIRECTORY_SOURCES_PLATFORMS                           "${GEN_DIRECTORY_SOURCES}/Platforms")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON                    "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Common")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL          "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON}/SNDOpenAL")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS                   "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Windows")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX                     "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Linux")
set(GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID                   "${GEN_DIRECTORY_SOURCES_PLATFORMS}/Android")

list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_COMMON})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_MAINPROC})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_CIPHER})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_COMPRESS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_WEB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_NODES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_GRAPHIC})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_GRAPHIC_2D})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_GRAPHIC_3D})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_USERINTERFACE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_INPUT})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_APPLICATION})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_XUTILS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_SCRIPT})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_SCRIPT_LIB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_SOUND})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_MEDIA})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID})


# --------------------------------------------------------------------
# Directorys of the ThirdPartyLibraries

# includes -----------------------------------------------------------

set(GEN_DIRECTORY_THIRDPARTYLIBRARIES                      "${GEN_DIRECTORY}/ThirdPartyLibraries")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_INCLUDE          "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/agg/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES          "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/agg/src")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_FREETYPE         "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/agg/font_freetype")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_INCLUDE     "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/freetype/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES     "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/freetype/src")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_OPENAL               "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/OpenAL/sdk/include")	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_SQLITE               "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/sqlite")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_MYSQL                "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/mysql-connector-c/include")	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_LIBPQ      "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/postgresql/src/interfaces/libpq")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_IFACES     "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/postgresql/src/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_INCLUDE         "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/glew/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_SOURCE          "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/glew/src")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB              "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/jpeglib")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG               "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/libpng")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_STB                  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/stb")	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_FFMPEG               "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/ffmpeg")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA                  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/lua/src") 								
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_DUKTAPE              "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/duktape/src") 	
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPCAP              "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/libpcap")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_LIB            "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/npcap/Lib")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_INCLUDE        "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/npcap/Include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB                 "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/zlib")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP         "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/zlib/contrib/minizip") 
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_TOAST                "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/Toast++")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_STACKWALKER          "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/StackWalker")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X           "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/rpi_ws281x")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST           "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/GoogleTest/googletest")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST_INCLUDE   "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST}/include")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST_SOURCES   "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST}/src")
set(GEN_DIRECTORY_THIRDPARTYLIBRARIES_NAMEOF               "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/nameof/include")    


list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_INCLUDE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_FREETYPE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_INCLUDE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_OPENAL})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_SQLITE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_LIBPQ})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_POSTGRESS_IFACES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_INCLUDE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GLEW_SOURCE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_STB})
#list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FFMPEG})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_DUKTAPE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST_INCLUDE})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST_SOURCES})
list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_NAMEOF})


if(COMPILE_TO_WINDOWS)

  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_TOAST})
  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_STACKWALKER})


  if(DIO_PCAP_FEATURE)
  
    list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_LIB})
    list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_NPCAP_INCLUDE})
	
  endif()

endif()  


if(COMPILE_TO_LINUX)

  if(LINUX_X11_FEATURE)     
  
    #list(APPEND INCLUDES_DIR "../../../../../../usr/include")
    #message(${INCLUDES_DIR})
	
  endif()

  
  if(INP_FEATURE)  

    option(GRP_FEATURE      "Graphics"                true )
    option(GRP_2D_FEATURE   "Activate Graphics 2D"    true )
  
  endif()


  if(SCRIPT_LIB_INPUTSIMULATE_FEATURE)  

    option(GRP_FEATURE      "Graphics"                true )
    option(GRP_2D_FEATURE   "Activate Graphics 2D"    true )
  
  endif()


  if(SCRIPT_LIB_WINDOW_FEATURE)  

    option(GRP_FEATURE      "Graphics"                true )
    option(GRP_2D_FEATURE   "Activate Graphics 2D"    true )
  
  endif()


  if(DIO_LINUX_DBUS_FEATURE)  
  
    list(APPEND INCLUDES_DIR "/usr/include/dbus-1.0")
    list(APPEND INCLUDES_DIR "/usr/lib/x86_64-linux-gnu/dbus-1.0/include")
	
  endif()


  if(DIO_LINUX_NETWORKMANAGER_FEATURE)         
  
    list(APPEND INCLUDES_DIR "/usr/include/libnm")
    list(APPEND INCLUDES_DIR "/usr/include/glib-2.0")
    list(APPEND INCLUDES_DIR "/usr/lib/x86_64-linux-gnu/glib-2.0/include")
	
  endif()

  if(DIO_PCAP_FEATURE)
  
    list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPCAP})
	
  endif()  
 
  if(DIO_LEDNEOPIXELWS2812B_FEATURE)
  
    list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X})
	
  endif()
 
endif()


if(COMPILE_TO_ANDROID)
 
  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ANDROID_GLUE})
	
endif()


# Libraries ----------------------------------------------------------

if(COMPILE_TO_WINDOWS)

  if(COMPILE_TO_WINDOWS_PC_32)
  
    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/OpenAL/sdk/libs/Win32")
    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/mysql-connector-c/libmysql/mysql-connector-c-6.1.11-win32/lib")
    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/postgresql/Release/libpq/lib_32")  
	
  endif()


  if(COMPILE_TO_WINDOWS_PC_64)    
  
    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/OpenAL/sdk/libs/Win64")
    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/mysql-connector-c/libmysql/mysql-connector-c-6.1.11-winx64/lib")
    list(APPEND LIBRARIES_DIR  "${GEN_DIRECTORY_THIRDPARTYLIBRARIES}/postgresql/Release/libpq/lib_64")  
	
  endif()

  link_directories(${LIBRARIES_DIR})

endif()


# --------------------------------------------------------------------
# Memory control 

if(XMEMORY_CONTROL_FEATURE)

  add_definitions(-DXMEMORY_CONTROL_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XMemory_Control.cpp")

endif()


# ------------------------------------------------------------------------------------------------
# App Modes

if(APPMODE_SERVICE_FEATURE)

  add_definitions(-DAPPMODE_SERVICE)  

endif()


# ------------------------------------------------------------------------------------------------
# Scripts

if(SCRIPT_FEATURE)

  option(XPROCESSMANAGER_FEATURE "Process Manager" true)

  if(SCRIPT_LIB_INPUTSIMULATE_FEATURE)
    
    option(INP_FEATURE "Inputs" true )
    option(INP_SIMULATE_FEATURE "Inputs Simulate" true)

  endif()

endif()


# ------------------------------------------------------------------------------------------------
# Library import/export activation

if(APPMODE_LIBRARY_DINAMIC_FEATURE)

  option(APPMODE_API_LIB_FEATURE "Activates the export/import of classes in a library" true)
  option(APPMODE_API_LIB_EXPORT_FEATURE "Activates the export of classes in a library" true)  
  add_definitions(-DAPPMODE_LIBRARY_DINAMIC)

endif()


if(APPMODE_API_LIB_FEATURE)

  add_definitions(-DAPPMODE_API_LIB_ACTIVE) 

  if(APPMODE_API_LIB_EXPORT_FEATURE)
    add_definitions(-DAPPMODE_API_LIB_EXPORT_ACTIVE)  
  endif()   

endif()


# ------------------------------------------------------------------------------------------------
# Macros SINGLETON

# --- eXtensions ---------------------------------------------------

set(GEN_MACRO  "-DGEN_XFACTORY=XFACTORY::GetInstance()")
add_definitions(${GEN_MACRO}) 

set(GEN_MACRO  "-DGEN_XSLEEP=XSLEEP::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XLOG=XLOG::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XSYSTEM=XSYSTEM::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XPROCESSMANAGER=XPROCESSMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XPATHSMANAGER=XPATHSMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XTRANSLATION=XTRANSLATION::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XPUBLISHER=XPUBLISHER::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XSHAREDMEMORYMANAGER=XSHAREDMEMORYMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XDRIVEIMAGEMANAGER=XDRIVEIMAGEMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_XEEPROMMEMORYMANAGER=XEEPROMMEMORYMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})


# --- Data Input/Output Manager -----------------------------------

set(GEN_MACRO  "-DGEN_DIOFACTORY=DIOFACTORY::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_DIOGPIO=DIOGPIO::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_DIODNSRESOLVED=DIODNSRESOLVED::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_DIOALERTS=DIOALERTS::GetInstance()")
add_definitions(${GEN_MACRO})

set(GEN_MACRO  "-DGEN_APPALERTS=APPALERTS::GetInstance()")
add_definitions(${GEN_MACRO})


# --- Graphics Manager --------------------------------------------

set(GEN_MACRO  "-DGEN_GRPFACTORY=GRPFACTORY::GetInstance()")
add_definitions(${GEN_MACRO})


# --- Input Manager -----------------------------------------------

set(GEN_MACRO  "-DGEN_INPMANAGER=INPMANAGER::GetInstance()")
add_definitions(${GEN_MACRO})


# --- Sound Manager -----------------------------------------------

set(GEN_MACRO  "-DGEN_SNDFACTORY=SNDFACTORY::GetInstance()")
add_definitions(${GEN_MACRO})


# --- User Interface ----------------------------------------------

set(GEN_MACRO  "-DGEN_USERINTERFACE=UI_MANAGER::GetInstance()")
add_definitions(${GEN_MACRO})


# --------------------------------------------------------------------
# Definitions platform

add_definitions(-DUNICODE)


# ----------------------------------------
# Platform Windows 

if(COMPILE_TO_WINDOWS)
       
  add_definitions(-DWINDOWS)
  add_definitions(-DHW_PC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  
  set(CompilerFlags CMAKE_C_FLAGS 
                    CMAKE_C_FLAGS_DEBUG 
                    CMAKE_C_FLAGS_RELEASE 
                    CMAKE_C_FLAGS_MINSIZEREL 
                    CMAKE_C_FLAGS_RELWITHDEBINFO

                    CMAKE_CXX_FLAGS 
                    CMAKE_CXX_FLAGS_DEBUG 
                    CMAKE_CXX_FLAGS_RELEASE 
                    CMAKE_CXX_FLAGS_MINSIZEREL 
                    CMAKE_CXX_FLAGS_RELWITHDEBINFO)
                  
  #---Set Static librarys -----------------------------------------------------------------    

  foreach(CompilerFlag ${CompilerFlags})

    if(APPMODE_WINDOWS_DINAMIC)  
      string(REPLACE "/MT" "/MD" ${CompilerFlag} "${${CompilerFlag}}")
    else()
      string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
    endif()  
    
    set(${CompilerFlag} "${${CompilerFlag}}" CACHE STRING "msvc compiler flags"   FORCE)
    #message("MSVC flags: ${CompilerFlag}:${${CompilerFlag}}")
  
  endforeach()
  #-------------------------------------------------------------------------------------------

  option(XTRANSLATION_FEATURE "Translation" true)   
  
endif()


# -------------------------------------------
# Platform Linux 

if(COMPILE_TO_LINUX)
 
  add_definitions(-DLINUX)

  if(LINUX_X11_FEATURE)   
  
    add_definitions(-DLINUX_X11_ACTIVE) 
	
  endif()
 

  if(LINUX_VISUALSTUDIOCODEPAGE_FEATURE)
  
    set(CMAKE_CXX_FLAGS "-finput-charset=CP1252")  
    
  endif()


  if(LINUX_VISUALSTUDIOUTF8_FEATURE)
  
    set(CMAKE_CXX_FLAGS "-finput-charset=UTF-8")
	
  endif()


  option(XTRANSLATION_FEATURE "Translation" true)   


  # ----------------------------------------
  # PC 

  if(COMPILE_TO_LINUX_PC_64)  
  
    add_definitions(-DHW_PC)    
	
  endif()


  # ----------------------------------------
  # Platform Raspberry Pi 32
 
  if(COMPILE_TO_LINUX_ARM_RPI)             
    
    # Define our host system
    set(CMAKE_SYSTEM_NAME Linux)
    set(CMAKE_SYSTEM_PROCESSOR arm)
             
    add_definitions(-DLINUX)
    add_definitions(-DHW_RASPBERRYPI) 
   
    set(RPI_ROOT    "/usr/rpi")
    set(RPI_TOOLS   "${RPI_ROOT}/tools/arm-bcm2708/arm-linux-gnueabihf")
    set(RPI_SYSROOT "${RPI_ROOT}/sysroot")

    set(CMAKE_C_COMPILER_LAUNCHER "ccache")
    set(CMAKE_CXX_COMPILER_LAUNCHER "ccache")

    list(APPEND INCLUDES_DIR "${RPI_SYSROOT}/usr/include/arm-linux-gnueabihf/")     
   
    # Define the cross compiler locations
    
    set(CMAKE_C_COMPILER   "${RPI_TOOLS}/bin/arm-linux-gnueabihf-gcc")
    set(CMAKE_CXX_COMPILER "${RPI_TOOLS}/bin/arm-linux-gnueabihf-g++")
    set(CMAKE_CXX_FLAGS    "${CMAKE_CXX_FLAGS} -std=gnu++11")
   
    # Define the sysroot path for the RaspberryPi distribution in our tools folder 
    set(CMAKE_SYSROOT  ${RPI_SYSROOT})
   
    
    # Don't look for programs in the sysroot (these are ARM programs, they won't run
    # on the build machine)
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

    # Only look for libraries, headers and packages in the sysroot, don't look on 
    # the build machine
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

    set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE armhf)
 
  endif()


  # ----------------------------------------
  # Platform ARM 32
 
  if(COMPILE_TO_LINUX_ARM)    
 
    add_definitions(-DHW_ARM)   
    set(CMAKE_SYSTEM_PROCESSOR arm)  
                            
    # Define the cross compiler locations
    set(ARM_TOOLS "/usr")
    list(APPEND INCLUDES_DIR "${ARM_TOOLS}/include/")   
    
    set(CMAKE_C_COMPILER_LAUNCHER "ccache")
    set(CMAKE_CXX_COMPILER_LAUNCHER "ccache")
   
    set(CMAKE_C_COMPILER   "${ARM_TOOLS}/bin/arm-linux-gnueabihf-gcc")
    set(CMAKE_CXX_COMPILER "${ARM_TOOLS}/bin/arm-linux-gnueabihf-g++")
             
    # Use our definitions for compiler tools
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
   
    # Search for libraries and headers in the target directories only
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

  endif() 
  

  # ----------------------------------------
  # Platform RPi/ARM 64
 
  if(COMPILE_TO_LINUX_ARM_64 OR COMPILE_TO_LINUX_ARM_RPI_64)  
  
    if(COMPILE_TO_LINUX_ARM_RPI_64)
      add_definitions(-DHW_RASPBERRYPI) 
      set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -fpermissive")
    else()
      add_definitions(-DHW_ARM64) 
    endif()

    set(CMAKE_SYSTEM_PROCESSOR aarch64)  
                                      
    list(APPEND INCLUDES_DIR "/usr/include/")    
   
    set(ARM64_TOOLS "/usr")
    set(CMAKE_C_COMPILER   "${ARM64_TOOLS}/bin/aarch64-linux-gnu-gcc")
    set(CMAKE_CXX_COMPILER "${ARM64_TOOLS}/bin/aarch64-linux-gnu-g++")
       
    # Use our definitions for compiler tools
    set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
   
    # Search for libraries and headers in the target directories only
    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

  endif()


  # ----------------------------------------
  # Compile clang LINUX
 
  if(COMPILE_WITH_CLANG)

    set(CMAKE_C_FLAGS   "-fdeclspec --std=c++0x")
    set(CMAKE_CXX_FLAGS "-fdeclspec --std=c++0x")

  endif()
  
endif()


# ----------------------------------------
# Platform Android
 
if(COMPILE_TO_ANDROID)      

  add_definitions(-DANDROID)    
  add_definitions(-DIOAPI_NO_64)
  add_definitions(-DFT_DEBUG_LEVEL_ERROR)
  add_definitions(-DFT_DEBUG_LEVEL_TRACE)
  add_definitions(-DFT2_BUILD_LIBRARY)

  set(ANDROID_ABI arm64-v8a)
  set(ANDROID_PLATFORM android-23)  
  set(ANDROID_NDK ANDROID_NDK_ROOT)
  set(CMAKE_TOOLCHAIN_FILE  "${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake")

  #set(CMAKE_C_COMPILER   "D:/GENFrameWork/ThirdPartyLibraries/android-ndk-r23b/toolchains/llvm/prebuilt/windows-x86_64/bin/clang-cl.exe")
  #set(CMAKE_CXX_COMPILER "D:/GENFrameWork/ThirdPartyLibraries/android-ndk-r23b/toolchains/llvm/prebuilt/windows-x86_64/bin/clang++.exe")

  #set(CMAKE_C_COMPILER   "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/bin/clang-cl")
  #set(CMAKE_CXX_COMPILER "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/bin/clang++")
  
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include")
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include/arm-linux-androideabi")
 
 
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include")  
  #list(APPEND INCLUDES_DIR  "${ANDROID_NDK_ROOT}/sysroot/usr/include")

  #add_library(native_app_glue STATIC ${ANDROID_NDK_ROOT}/sources/android/native_app_glue/android_native_app_glue.c)
  #target_include_directories(native_app_glue PUBLIC ${ANDROID_NDK_ROOT}/sources/android/native_app_glue)

  option(XTRANSLATION_FEATURE "Translation" true)                                  

endif()   


# -------------------------------------------
# Platform STM32

if(COMPILE_TO_STM32)

  # Configure the project
  set(CMAKE_C_STANDARD 11)
  set(CMAKE_CXX_STANDARD 17)

  # Specify the cross compiler
  set(CMAKE_SYSTEM_NAME Generic)
  set(CMAKE_SYSTEM_VERSION 1)
  set(CMAKE_C_COMPILER_WORKS 1)
  set(CMAKE_C_COMPILER arm-none-eabi-gcc)
  set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
  set(AS arm-none-eabi-as)
  set(AR arm-none-eabi-ar)
  set(OBJCOPY arm-none-eabi-objcopy)
  set(OBJDUMP arm-none-eabi-objdump)
  set(SIZE arm-none-eabi-size)

  set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/STM32/${DEVICE_NAME}_FLASH.ld)

  #Uncomment for hardware floating point
  set(FPU_FLAGS "-mfloat-abi=hard -mfpu=fpv4-sp-d16")
  add_definitions(-DARM_MATH_CM4 -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING -D__FPU_PRESENT=1 )

  #Uncomment for software floating point
  #set(FPU_FLAGS "-mfloat-abi=soft")

  set(COMMON_FLAGS "-mcpu=cortex-m4 ${FPU_FLAGS} -mthumb -mthumb-interwork -ffunction-sections -fdata-sections -g -fno-common -fmessage-length=0 -specs=nosys.specs -specs=nano.specs")

  set(CMAKE_C_FLAGS "${COMMON_FLAGS}")
  set(CMAKE_CXX_FLAGS "${COMMON_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS_INIT "-Wl,-gc-sections -T ${LINKER_SCRIPT}")

  add_definitions(-D__weak=__attribute__\(\(weak\)\) -D__packed=__attribute__\(\(__packed__\)\) -DUSE_HAL_DRIVER -${SHORT_DEVICE_ID}xx)

  file(GLOB_RECURSE SOURCES "startup/*.*" "Drivers/*.*" "Src/*.*" "Inc/*.*")

  include_directories(Inc 
                      Drivers/${SERIES}xx_HAL_Driver/Inc
                      Drivers/${SERIES}xx_HAL_Driver/Inc/Legacy
                      Drivers/CMSIS/Device/ST/${SERIES}xx/Include
                      Drivers/CMSIS/Include Inc)

  add_executable(${PROJECT_NAME}.elf ${SOURCES} ${LINKER_SCRIPT})
  target_link_libraries(${PROJECT_NAME}.elf m)

  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map")

  set(HEX_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.hex)
  set(BIN_FILE ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.bin)

  add_custom_command( TARGET ${PROJECT_NAME}.elf POST_BUILD
                      COMMAND ${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}
                      COMMAND ${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}
                      COMMENT "Building ${HEX_FILE}
                      Building ${BIN_FILE}")

endif()


# --------------------------------------------------------------------
# Definitions application

# -------------------------------------------------
# Application CFG

if(APP_CFG_REMOTEFILE_FEATURE               OR
   APP_CFG_GENERAL_FEATURE                  OR 
   APP_CFG_LOG_FEATURE                      OR
   APP_CFG_INTERNETSERVICES_FEATURE         OR 
   APP_CFG_DYNDNSMANAGER_FEATURE            OR
   APP_CFG_WEBSERVER_FEATURE                OR
   APP_CFG_CHECKRESOURCESHARDWARE_FEATURE   OR
   APP_CFG_LOCATION_FEATURE                 OR
   APP_CFG_DNSRESOLVED_FEATURE              OR
   APP_CFG_ALERTS_FEATURE                   OR
   APP_CFG_APPUPDATE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPCFG.cpp")      
  
endif()


if(APP_CFG_LOG_FEATURE)

  option(XLOG_FEATURE "LOG File" true)

endif()


if(APP_FEATURE)

  add_definitions(-DAPP_ACTIVE)
  option(XPUBLISHER_FEATURE "XPublisher" true)
  option(XSYSTEM_FEATURE "System functions" true)

endif()


if(APP_CFG_REMOTEFILE_FEATURE)

  add_definitions(-DAPP_CFG_REMOTEFILE_ACTIVE)
  option(XFILE_CFG_FEATURE "XFile Config format" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIORemoteFileCFG.cpp")
  option(DIO_WEBCLIENT_FEATURE "Web Client" true)

endif()


if(APP_CFG_GENERAL_FEATURE)

  add_definitions(-DAPP_CFG_GENERAL_ACTIVE)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


if(APP_CFG_LOG_FEATURE)

  add_definitions(-DAPP_CFG_LOG_ACTIVE)  
  option(APP_LOG_FEATURE "Application Log" true)
  option(XLOG_FEATURE "LOG File" true)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


if(APP_CFG_INTERNETSERVICES_FEATURE)

  add_definitions(-DAPP_CFG_INTERNETSERVICES_ACTIVE)
  option(HASH_FEATURE "HASH" true)
  option(APP_INTERNETSERVICES_FEATURE "Application Internet Services" true)
  option(XFILE_CFG_FEATURE "XFile Config format" true)
  option(DIO_CHECKCONNECTIONS_FEATURE "Check Connections" true)
  option(DIO_NETWORKTINEPROTOCOL_FEATURE "Network Time Protocol" true)

endif()


if(APP_CFG_DYNDNSMANAGER_FEATURE)

  add_definitions(-DAPP_CFG_DYNDNSMANAGER_ACTIVE)

endif()


if(APP_CFG_WEBSERVER_FEATURE)

  add_definitions(-DAPP_CFG_WEBSERVER_ACTIVE)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


if(APP_CFG_CHECKRESOURCESHARDWARE_FEATURE)

  add_definitions(-DAPP_CFG_CHECKRESOURCESHARDWARE_ACTIVE)
  option(APP_CHECKRESOURCESHARDWARE_FEATURE "Application Check Resources Hardware" true)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


if(APP_CFG_LOCATION_FEATURE)

  add_definitions(-DAPP_CFG_LOCATION_ACTIVE)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


if(APP_CFG_DNSRESOLVED_FEATURE)

  add_definitions(-DAPP_CFG_DNSRESOLVED_ACTIVE)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


if(APP_CFG_ALERTS_FEATURE)

  add_definitions(-DAPP_CFG_ALERTS_ACTIVE)
  option(APP_ALERTS_FEATURE "Application Alerts" true)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


if(APP_CFG_APPUPDATE_FEATURE)

  add_definitions(-DAPP_CFG_APPUPDATE_ACTIVE)
  option(APP_UPDATE_FEATURE "Application Update" true)
  option(XFILE_CFG_FEATURE "XFile Config format" true)

endif()


# -------------------------------------------------
# Special Linux

if(COMPILE_TO_LINUX)

  option(XPROCESSMANAGER_FEATURE "Process Manager" true)

endif()


# -------------------------------------------------
# Always

list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_COMMON}/Version.cpp")


# -------------------------------------------------
# Utils
         
if(XTRACE_FEATURE)

  add_definitions(-DXTRACE_ACTIVE)

  if(XTRACE_NOINTERNET_FEATURE)
  
    add_definitions(-DXTRACE_NOINTERNET)  
	
  endif()
 
  if((COMPILE_TO_WINDOWS)  OR  (COMPILE_TO_LINUX)  OR  (COMPILE_TO_ANDROID))
  
    option(DIO_FEATURE "Data Input/Output" true)
    option(DIO_DNSRESOLVED_FEATURE "DNS Resolved" true)
    option(DIO_WEBCLIENT_FEATURE "Web Client" true)
    option(DIO_SCRAPERWEB_FEATURE "Scraper Web" true)
	
  endif()

endif()  


if(XLOG_FEATURE) 

  option(XFILE_FEATURE "XFile" true)

endif()


if(XFILE_FEATURE)

  option(CIPHER_SYMMETRIC_FEATURE "Cipher" true)

endif()


if(XPROCESSMANAGER_FEATURE)

  add_definitions(-DXPROCESSMANAGER_ACTIVE)

endif()


if(XSHAREDMEMORYMANAGER_FEATURE)

  add_definitions(-DXSHAREDMEMORYMANAGER_ACTIVE)

endif()


if(XDRIVEIMAGEMANAGER_FEATURE)

  add_definitions(-DXDRIVEIMAGEMANAGER_ACTIVE)

endif()   


if(XEEPROMMEMORYMANAGER_FEATURE)

  add_definitions(-DXEEPROMMEMORYMANAGER_ACTIVE)

endif() 


# -------------------------------------------------
# Data Input/Output     

if(DIO_FEATURE)

  add_definitions(-DDIO_ACTIVE)
  option(DIO_DNSRESOLVED_FEATURE "DNS Resolved" true)
  option(DIO_WEBCLIENT_FEATURE "Web Client" true)
  option(DIO_SCRAPERWEB_FEATURE "Scraper Web" true)

endif()


if(DIO_WAKEONLAN_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWakeOnLAN.cpp")
  option(DIO_STREAMUDP_FEATURE "Stream UDP" true)

endif()


if(DIO_MPSSE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/DIOMPSSE.cpp")
  option(DIO_STREAMUSB_FEATURE "Stream USB" true)

endif()


if(DIO_DNSRESOLVED_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIODNSProtocol.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODNSResolved.cpp")  
  option(DIO_STREAMUDP_FEATURE "Stream UDP" true)

endif()


if(DIO_SCRAPERWEB_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWeb.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebCache.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebPublicIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebMACManufacturer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebSexName.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebTranslation.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebUserAgentID.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebWeather.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_SCRAPERWEB}/DIOScraperWebGeolocationIP.cpp")
  option(XFILE_XML_FEATURE "XFile XML format" true)
  option(XFILE_JSON_FEATURE "XFile JSON format" true)
  option(DIO_WEBCLIENT_FEATURE "Web Client" true)

endif()


if(DIO_CHECKCONNECTIONS_FEATURE) 

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOCheckInternetConnection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOCheckTCPIPConnections.cpp")
  option(DIO_PING_FEATURE "Ping" true)

endif()


if(DIO_NETWORKTINEPROTOCOL_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIONTP.cpp")  
  option(DIO_STREAMUDP_FEATURE "UDP" true)

endif()


if(DIO_DYNDNS_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIODynDNS.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODynDNS_Manager.cpp")    
  option(DIO_WEBCLIENT_FEATURE "Web Client" true)

endif()


if(DIO_PING_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOPing.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOPing_XEvent.cpp")
  option(DIO_STREAMICMP_FEATURE "ICMP" true) 

endif()


if(DIO_WEBCLIENT_FEATURE) 

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebHeader.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebClient.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebClient_XEvent.cpp")   
  option(DIO_STREAMTCPIP_FEATURE "TCPIP" true)
  option(HASH_MD5_FEATURE "Hash MD5" true)

endif()
  
if(DIO_PROTOCOL_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocol_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocol.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocol_ApplicationData.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocol_ConnectionsManager_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocol_ConnectionsManager.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocol_ApplicationData.cpp")
  option(DIO_STREAMCIPHER_FEATURE "Stream Cipher" true)
  option(DIO_STREAMUDP_FEATURE "Stream UDP" true)
  option(DIO_STREAMTCPIP_FEATURE "Stream TCPIP" true)
  option(CIPHER_SYMMETRIC_AES_FEATURE "Cipher Symetric AES" true)

 endif()


if(DIO_PROTOCOL_CLI_BUS_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocolCLIBus.cpp")
  option(DIO_PROTOCOL_CLI_FEATURE "Protocol in CLI" true)

endif()


if(DIO_PROTOCOL_CLI_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOProtocolCLI.cpp")
  option(DIO_STREAMCIPHER_FEATURE "Stream Cipher" true)   
  option(DIO_STREAMUART_FEATURE "Stream UART" true)
  option(DIO_STREAMUSB_FEATURE "Stream USB" true)
  option(DIO_STREAMTCPIP_FEATURE "Stream TCPIP" true)
  option(CIPHER_SYMMETRIC_AES_FEATURE "Cipher Symetric AES" true)

endif()


if(DIO_STREAMCIPHER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamCipher.cpp")
  option(HASH_FEATURE "Hash" true)
  option(CIPHER_SYMMETRIC_FEATURE "Cipher Symetric" true)

endif()


if(DIO_ALERTS_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOAlerts.cpp")    
  option(DIO_ATCMD_FEATURE "AT Commands" true)
  option(DIO_SMTP_FEATURE "SMTP (email)" true) 
  option(DIO_WEBCLIENT_FEATURE "Web Client" true)
  option(DIO_STREAMUDP_FEATURE "Stream UDP" true)

endif()


if(DIO_SMTP_FEATURE)

  add_definitions(-DDIO_SMTP_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOSMTP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOEmailAddress.cpp")
  option(DIO_STREAMTCPIP_FEATURE "Stream TCPIP" true)

endif()

if(DIO_SNMP_FEATURE)

  add_definitions(-DDIO_SNMP_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOSNMP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XBER.cpp")

endif()


if(DIO_ATCMD_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOATCMDS.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOATCMDGSM.cpp")   
  option(DIO_STREAMUART_FEATURE "Stream UART" true)

endif()


if(DIO_NODEMANAGER_FEATURE)    

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeManager.cpp")
  option(DIO_NODES_FEATURE "Nodes modules" true)    

endif()


if(DIO_NODEITEMHANDLER_SENSORAM2315_FEATURE)    

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemHandler_SensorAM2315.cpp")   
  option(DIO_STREAM_FEATURE, "Stream" true)
  option(DIO_STREAMI2C_FEATURE "Stream I2C" true) 
  option(DIO_I2C_TEMHUMSENSOR_AM2315_FEATURE "I2C Temperature Humidity Sensor AM2315" true) 
  option(DIO_NODES_FEATURE "Nodes modules" true)

endif()


if(DIO_NODEITEMHANDLER_GPIODIGITAL_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemHandler_GPIODigital.cpp")
  option(DIO_NODES_FEATURE "Nodes modules" true)   

endif()
 

if(DIO_NODES_FEATURE)    

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONode.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONode_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItem.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemValue.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemValueUnitFormat.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_NODES}/DIONodeItemHandler.cpp") 
  option(XUUID_FEATURE "UUID functions" true)     

endif()


if(DIO_STREAMUART_FEATURE         OR 
   DIO_STREAMUSB_FEATURE          OR 
   DIO_STREAMICMP_FEATURE         OR 
   DIO_STREAMUDP_FEATURE          OR 
   DIO_STREAMCPIP_FEATURE         OR 
   DIO_STREAMBLUETOOTH_FEATURE    OR 
   DIO_STREAMBLUETOOTHLE_FEATURE  OR 
   DIO_STREAMSPI_FEATURE          OR 
   DIO_STREAMI2C_FEATURE)

  option(DIO_STREAM_FEATURE "Stream" true)

endif()


if(DIO_WEBCLIENT_FEATURE OR DIO_WEBSERVER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebHeader.cpp")

endif()


if(DIO_WEBSERVER_FEATURE)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebPageHTMLCreator.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebPageHTMLCreator_XEvent.cpp")                        
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_XEvent.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_APIRest.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_ResolveEndPoint.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_Plugin.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_PluginsManager.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_Plugin_CGI.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_Plugin_PHP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_WEB}/DIOWebServer_QueryStrings.cpp")
  option(DIO_STREAMTCPIP_FEATURE "TCPIP" true)
  option(HASH_FEATURE "HASH" true)
  option(HASH_SHA1_FEATURE "Hash SHA1" true)
  option(XPROCESSMANAGER_FEATURE "Process Manager" true)

endif()
 

if(DIO_STREAMTLS_FEATURE)

  add_definitions(-DDIOTLS_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamTLS.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamTLSConfig.cpp") 
  option(DIO_STREAMTCPIP_FEATURE "TCPIP" true)
  option(HASH_FEATURE "XTrace" true)
  option(CIPHER_SYMMETRIC_FEATURE "Cipher Symetric" true)
  option(CIPHER_ASYMMETRIC_FEATURE "Cipher Asymetric" true)

endif()


if(DIO_STREAMUART_FEATURE)

  add_definitions(-DDIOUART_ACTIVE)

endif()


if(DIO_STREAMUSB_FEATURE)

  add_definitions(-DDIOUSB_ACTIVE)

endif()


if(DIO_STREAMBLUETOOTH_FEATURE)

  add_definitions(-DDIOBLUETOOTH_ACTIVE)  
  option(XUUID_FEATURE "UUID functions" true)

endif()


if(DIO_STREAMBLUETOOTHLE_FEATURE)

  add_definitions(-DDIOBLUETOOTHLE_ACTIVE)

endif()


if(DIO_STREAMI2C_FEATURE)

  add_definitions(-DDIOI2C_ACTIVE)  
  
endif()


if(DIO_STREAMSPI_FEATURE)

  add_definitions(-DDIOSPI_ACTIVE)

endif()


if(DIO_STREAMICMP_FEATURE)

  add_definitions(-DDIOICMP_ACTIVE)

endif()


if(DIO_STREAMUDP_FEATURE)

  add_definitions(-DDIOUDP_ACTIVE)

endif()


if(DIO_STREAMTCPIP_FEATURE)

  add_definitions(-DDIOTCPIP_ACTIVE)

endif()


if(DIO_STREAMWIFI_FEATURE)

  add_definitions(-DDIOWIFI_ACTIVE)

endif()


if(DIO_WIFIMANAGERMODE_FEATURE)

  add_definitions(-DDIOWIFIMANAGERMODE_ACTIVE)

endif()


if(DIO_MODBUSCLIENT_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOModBus_Client.cpp")
  
endif()


if(DIO_PING_FEATURE)

  add_definitions(-DDIOPING_ACTIVE)

endif()


if(DIO_PCAP_FEATURE)

  add_definitions(-DDIOPCAP_ACTIVE)

endif()


if(DIO_GPIO_FEATURE)

  add_definitions(-DDIOGPIO_ACTIVE)

  if(DIO_GPIO_PCPARALLEL_FEATURE)

    add_definitions(-DDIO_GPIO_PCPARALLEL_ACTIVE)
  
  endif()

endif()


if(DIO_ALERTS_FEATURE)

  add_definitions(-DDIOALERTS_ACTIVE)

endif()


if(DIO_LEDNEOPIXELWS2812B_FEATURE)

  add_definitions(-DDIOLEDNEOPIXELWS2812B_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/DIOLedNeoPixelWS2812B.cpp")
  
endif()


if(DIO_IEC60870_5_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOIEC60870_5.cpp")
  option(DIO_STREAMUART_FEATURE "Stream UART" true)
  option(DIO_STREAMTCPIP_FEATURE "Stream TCPIP" true)
  
endif()


if(DIO_OBEXPUSH_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_PROTOCOLS}/DIOOBEXPush.cpp")
  option(DIO_STREAMUART_FEATURE "Stream UART" true)
      
endif()


# -------------------------------------------------
# Databases

if(DATABASES_SQL_SQLITE_FEATURE)

  add_definitions(-DDB_SQLITE_ACTIVE)
  option(DATABASES_SQL "DataBases SQL" true)

endif()


if(DATABASES_SQL_MYSQL_FEATURE)

  add_definitions(-DDB_MYSQL_ACTIVE)
  option(DATABASES_SQL "DataBases SQL" true)

endif()


if(DATABASES_SQL_POSTGRESQL_FEATURE)

  add_definitions(-DDB_POSTGRESQL_ACTIVE)
  option(DATABASES_SQL "DataBases SQL" true)

endif()


if(DATABASES_SQL_FEATURE)

  add_definitions(-DDB_SQL_ACTIVE)
  option(XPUBLISHER_FEATURE "XPublisher" true)
  option(XFSMACHINE_FEATURE "XFSMachine" true)

endif()


# -------------------------------------------------
# Graphics 

if(GRP_FEATURE)

  add_definitions(-DGRP_ACTIVE)
  add_definitions(-DFT_DEBUG_LEVEL_ERROR)
  add_definitions(-DFT_DEBUG_LEVEL_TRACE)
  add_definitions(-DFT2_BUILD_LIBRARY)

endif()


if(GRP_OPENGL_FEATURE)

  add_definitions(-DGRP_OPENGL_ACTIVE)

endif()


# -------------------------------------------------
# Input 


if(INP_SIMULATE_FEATURE)

  add_definitions(-DINP_SIMULATE_ACTIVE)
  option(INP_FEATURE "Inputs" true)

endif()


if(INP_CAPTURE_FEATURE)

  add_definitions(-DINP_CAPTURE_ACTIVE)
  option(INP_FEATURE "Inputs" true)
  
endif()


if(INP_FEATURE)

  add_definitions(-DINP_ACTIVE)

endif()


# -------------------------------------------------
# Sound 

if(SND_FEATURE)

  add_definitions(-DSND_ACTIVE)

endif()

                          
# --------------------------------------------------------------------
# Sources        
# --------------------------------------------------------------------

           
# -------------------------------------------------
# MainProc               
                        
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_MAINPROC}/MainProc.cpp")


# -------------------------------------------------
# Application   

if(APP_CONSOLE_FEATURE)

  option(XCONSOLE_FEATURE "Console functions" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPConsole.cpp")   
  
endif()
        
        
if(APP_GRAPHICS_FEATURE) 

  option(XPUBLISHER_FEATURE "XPublisher" true)
  option(XFSMACHINE_FEATURE "XFSMachine" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPGraphics.cpp") 
  
endif()


if(APP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPBase.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APP_XEvent.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPMain.cpp")
  option(XSYSTEM_FEATURE "System functions" true)

endif()
  
  
if(APP_CHECKRESOURCESHARDWARE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPCheckResourcesHardware.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPCheckResourcesHardware_XEvent.cpp")    
  option(XSCHEDULER_FEATURE "XScheduler" true)

endif()


if(APP_INTERNETSERVICES_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPInternetServices.cpp")                         
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPInternetServices_XEvent.cpp") 
  option(DIO_CHECKCONNECTIONS_FEATURE "Check Connections" true)
  option(XSCHEDULER_FEATURE "XScheduler" true)

endif()


if(APP_LOG_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPLog.cpp")     

endif()


if(APP_WEBSERVER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPWebServer.cpp")  

endif()


if(APP_UPDATE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPUpdate.cpp")  
  option(DIO_APPLICATIONUPDATE_FEATURE "Application Update" true)

endif()


if(APP_ALERTS_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_APPLICATION}/APPAlerts.cpp")  

endif()


# -------------------------------------------------
# Graphics

if(GRP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPScreen.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPViewPort.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPXEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPProperties.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmap.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapSequence.cpp")

  if(GRP_FILE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFile.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileBMP.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileJPG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFilePNG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileTGA.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPVideoFile.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPVideoFileAVI.cpp")    
    option(XFILE_RIFF_FEATURE "XFile RIFF format" true)
  
  endif()

  if(GRP_2D_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRPCanvas.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DVertexs.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DRebuildAreas.cpp")
  
  endif()

endif()


# -------------------------------------------------
# User Interface

if(USERINTERFACE_FEATURE)

  if(USERINTERFACE_DEBUG_FEATURE)

    add_definitions("-DUSERINTERFACE_DEBUG")
  
  endif()

  option(XPUBLISHER_FEATURE "XPublisher" true)
  option(XFSMACHINE_FEATURE "XFSMachine" true)
  option(XFILE_XML_FEATURE "XFile XML format" true)
  option(XFILE_ZIP_FEATURE "XFile Zip format" true)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Color.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Colors.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Text.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Texts.cpp")    
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Animation.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Animations.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_BoundaryLine.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Property_Selectable.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Property_Editable.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Property_Scrolleable.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Text.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Image.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Animation.cpp")    
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Option.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_MultiOption.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Button.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_CheckBox.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_TextBox.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_EditText.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Form.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Menu.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_ListBox.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_ProgressBar.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_Scroll.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Element_ControlTransition.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_VirtualKeyBoard.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Layout.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE}/UI_Manager.cpp")
 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_Skin.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_SkinCanvas.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_USERINTERFACE_SKIN}/UI_SkinCanvas_Flat.cpp")
 
endif()


# -------------------------------------------------
# Scripts

if(SCRIPT_FEATURE)

  option(XPUBLISHER_FEATURE "XPublisher" true)
  option(XFSMACHINE_FEATURE "XFSMachine" true)
  option(XCONSOLE_FEATURE "Console functions" true) 

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Lib.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_LibFunction.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_G.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_CFG.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_IO.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Math.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Path.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Rand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_String.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_System.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Timer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Process.cpp")


  if(SCRIPT_LIB_INPUTSIMULATE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_InputSimulate.cpp")

  endif()


  if(SCRIPT_LIB_WINDOW_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT_LIB}/Script_Lib_Window.cpp")

  endif()


  if(SCRIPT_LUA_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Lua.cpp")
  
  endif()


  if(SCRIPT_JAVASCRIPT_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SCRIPT}/Script_Javascript.cpp")
  
  endif()

endif()


# -------------------------------------------------
# Databases

if(DATABASES_SQL_SQLITE_FEATURE)
  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_SQLITE}/SQLite_Result.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_SQLITE}/sqlite3.c")

endif()


if(DATABASES_SQL_MYSQL_FEATURE)

  list(APPEND INCLUDES_DIR ${GEN_DIRECTORY_THIRDPARTYLIBRARIES_MYSQL})  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Result.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_MYSQL}/MySQL_Variant.cpp")

endif()


if(DATABASES_SQL_POSTGRESQL_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL_POSTGRESQL}/PostgreSQL_Result.cpp")

endif()


if(DATABASES_SQL_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Factory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Database.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Connection.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Query.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Error.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Result.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATABASES_SQL}/DB_SQL_Variant.cpp")

endif()


# -------------------------------------------------
# Graphics

if(GRP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPScreen.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPViewPort.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPXEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPProperties.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmap.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapSequence.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPFrameRate.cpp")

  if(GRP_FILE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFile.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileBMP.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileJPG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFilePNG.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC}/GRPBitmapFileTGA.cpp")
  
  endif()

  if(GRP_2D_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRPCanvas.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DVertexs.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_GRAPHIC_2D}/GRP2DRebuildAreas.cpp")
  
  endif()

endif()


# -------------------------------------------------
# Inputs

if(INP_SIMULATE_FEATURE)
  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPSimulate.cpp")  

endif()


if(INP_CAPTURE_FEATURE)
  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPCapture_XEvent.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPCapture.cpp")  

endif()


if(INP_FEATURE)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPManager.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPDevice.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPButton.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPCursor.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_INPUT}/INPCursorMotion.cpp")

endif()


# -------------------------------------------------
# Data Input/Output

if(DIO_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOMAC.cpp")
  option(DIO_NOTIFICATIONS_MANAGER_FEATURE "Notifications Nanager" true)

endif()


if(DIO_WIFIMANAGERMODE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOWifiManagerMode.cpp")
  option(DIO_STREAMTCPIP_FEATURE "Stream TCPIP" true)

endif()


if(DIO_NOTIFICATIONS_MANAGER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIONotificationsManager.cpp")

endif()


if(DIO_STREAM_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODevice.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStream.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDevice.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamEnumDevices.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamEnumServers.cpp") 
  option(XSLEEP_FEATURE "Sleep functions" true)
  option(XPUBLISHER_FEATURE "XPublisher" true)
  option(XFSMACHINE_FEATURE "XFSMachine" true)

endif()


if(DIO_STREAMUART_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUART.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUARTConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUARTLocalEnumDevices.cpp")

endif()


if(DIO_STREAMUSB_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUSB.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUSBConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceUSB.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUSBLocalEnumDevices.cpp")

endif()


if(DIO_STREAMBLUETOOTH_FEATURE OR DIO_STREAMBLUETOOTHLE_FEATURE) 

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetooth.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothConfig.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceBluetooth.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamEnumBluetoothDevices.cpp")      
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothLocalEnumDevices.cpp")     

endif()


if(DIO_STREAMBLUETOOTH_FEATURE) 

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothRemoteEnumDevices.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceBluetooth.cpp")  

endif()


if(DIO_STREAMBLUETOOTHLE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothLERemoteEnumDevices_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamBluetoothLERemoteEnumDevices.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceBluetoothLE.cpp")  

endif()


if(DIO_STREAMI2C_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODeviceI2C.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamI2C.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamI2CConfig.cpp")  
 
  if(DIO_I2C_6AXISTRACKING_LSM303DLHC_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2C6AxisTrackingLSM303DLHC.cpp")
  
  endif()


  if(DIO_I2C_6AXISTRACKING_BMI270_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2C6AxisTrackingBMI270.cpp")
  
  endif()


  if(DIO_I2C_9AXISTRACKING_MPU9150_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2C9AxisTrackingMPU9150.cpp")
  
  endif()


  if(DIO_I2C_ADDACONVERTER_PCF8591_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CADDAConverterPCF8591.cpp")
  
  endif()


  if(DIO_I2C_AIRQUALITY_CCS811_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CAirQualityCCS811.cpp") 
  
  endif()


  if(DIO_I2C_EEPROM_24XXX_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CEEprom24XXX.cpp")  
  
  endif()


  if(DIO_I2C_GPIO_MCP2317_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CGPIOMCP2317.cpp")
  
  endif()


  if(DIO_I2C_GPIO_PCF8574_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CGPIOPCF8574.cpp")
  
  endif()


  if(DIO_I2C_LIGHTSENSOR_TSL2561_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CLightSensorTSL2561.cpp")
  
  endif()


  if(DIO_I2C_OLEDDISPLAY_SSD1306_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2COLEDDisplaySSD1306.cpp")
    option(DIO_DISPLAYDEVICE_FEATURE "Display Device" true)
  
  endif()


  if(DIO_I2C_PWMCONTROLER_PCA9685_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CPWMControlerPCA9685.cpp")
  
  endif()


  if(DIO_I2C_TEMHUMSENSOR_AM2315_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CTemHumSensorAM2315.cpp")
  
  endif()


  if(DIO_I2C_TEMHUMSENSOR_SHT20_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CTemHumSensorSHT20.cpp")
  
  endif()


  if(DIO_I2C_MONITORGAUGE_LTC2942_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CMonitorGaugeLTC2942.cpp")
  
  endif()


  if(DIO_I2C_BATTERYCHARGER_BQ24295_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CBatteryChargerBQ24295.cpp")
  
  endif()


  if(DIO_I2C_TOUCHSENSOR_AT42QT1060_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_I2C}/DIOI2CTouchSensorAT42QT1060.cpp")
  
  endif()

endif()


if(DIO_STREAMSPI_FEATURE)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODeviceSPI.cpp")   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamSPI.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamSPIConfig.cpp") 


  if(DIO_SPI_GPIO_MCP23S17_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPIGPIOMCP23S17.cpp")
  
  endif()


  if(DIO_SPI_LCDDISPLAY_PCF8833_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPILCDDisplayPCF8833.cpp")    
    option(DIO_DISPLAYDEVICE_FEATURE "Display Device" true)
  
  endif()


  if(DIO_SPI_OLEDDISPLAY_SSD1306_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPIOLEDDisplaySSD1306.cpp")
    option(DIO_DISPLAYDEVICE_FEATURE "Display Device" true)
  
  endif()


  if(DIO_SPI_OLEDDISPLAY_SSD1331_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPIOLEDDisplaySSD1331.cpp")
    option(DIO_DISPLAYDEVICE_FEATURE "Display Device" true)
  
  endif()


  if(DIO_SPI_TFTDISPLAY_ILI9341_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPITFTDisplayILI9341.cpp")
    option(DIO_DISPLAYDEVICE_FEATURE "Display Device" true)
  
  endif()


  if(DIO_SPI_TFTDISPLAY_ST7789_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPITFTDisplayST7789.cpp")
    option(DIO_DISPLAYDEVICE_FEATURE "Display Device" true)
  
  endif()


  if(DIO_SPI_TOUCHSCREEN_STMPE610_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS_SPI}/DIOSPITouchScreenSTMPE610.cpp")
  
  endif()

endif()


if(DIO_DISPLAYDEVICE_FEATURE)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIODisplayDevice.cpp")

endif()


if(DIO_STREAMICMP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamICMP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamICMPConfig.cpp")

endif()


if(DIO_STREAMUDP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDPConfig.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDPLocalEnumServers.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamUDPAcknowledge.cpp")    
  option(HASH_FEATURE "HASH" true)
  option(HASH_CRC32_FEATURE "Hash CRC32" true)

endif()


if(DIO_STREAMTCPIP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamTCPIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamTCPIPConfig.cpp") 

endif()


if(DIO_STREAMWIFI_FEATURE)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceWifi.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamWifiRemoteEnumDevices.cpp")

endif()


if(DIO_STREAMUDP_FEATURE OR DIO_STREAMTCPIP_FEATURE OR DIO_STREAMWIFI_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOURL.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamDeviceIP.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamIPLocalEnumDevices.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_STREAMS}/DIOStreamConfigString.cpp")

endif()


if(DIO_GPIO_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOGPIO.cpp")

endif()
 

if(DIO_PCAP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPCap.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOPCapEX.cpp")  

endif()

if(DIO_BUSPIRATE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO_DRIVERS}/DIOBusPirate.cpp")  

endif()


if(DIO_APPLICATIONUPDATE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOApplicationUpdate_XEvent.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_DATAIO}/DIOApplicationUpdate.cpp")
  option(XPROCESSMANAGER_FEATURE "Process Manager" true)

endif()


# -------------------------------------------------
# Sound 

if(SND_FEATURE) 

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFactory.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDElement.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDInstance.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDSource.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SND_XEvent.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDStreamInstance.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDStreamElement.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDCodec.cpp")    
  option(SND_FILE_WAV_FEATURE "Sound WAV file" true)
  option(SND_FILE_OGG_FEATURE "Sound OGG file" true)

endif()


if(SND_FILE_OGG_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFile.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFileOGG.cpp")  

endif()


if(SND_FILE_WAV_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFileBase.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_SOUND}/SNDFileWAV.cpp")  

endif()


# -------------------------------------------------
# Utils

# Special Encript flag
if(CIPHER_ASYMMETRIC_FEATURE)  

  if(CIPHER_ASYMMETRIC_FILEKEY_PEM)

    add_definitions(-DCIPHERKEYSFILEPEM_ACTIVE)
    option(XASN1_FEATURE "ANS.1 functions" true)
  
  endif()

endif()


list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XBase.cpp")

list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XString.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XBuffer.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XVariant.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XPath.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XRect.cpp") 

list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFactory.cpp") 
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XTimer.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XDateTime.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XRand.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XDir.cpp")
list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XThread.cpp")


if(XTRACE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XTrace.cpp")

endif()


if(XTHREADCOLLECTED_FEATURE)

  add_definitions(-DXTHREADCOLLECTED_ACTIVE)    
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XThreadCollected.cpp")

endif()


if(XSERIALIZABLE_BINARY_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializationMethodBinary.cpp")

endif()


if(XSERIALIZABLE_JSON_FEATURE)

  add_definitions(-DXSERIALIZABLE_JSON_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializationMethodJSON.cpp")

endif()


if(XSERIALIZABLE_BINARY_FEATURE OR XSERIALIZABLE_JSON_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializable.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSerializationMethod.cpp")

endif()


if(XCONSOLE_FEATURE)

  add_definitions(-DXCONSOLE_ACTIVE) 
  option(XSLEEP_FEATURE "Sleep functions" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XConsole.cpp")

endif()


if(XSYSTEM_FEATURE)  

  add_definitions(-DXSYSTEM_ACTIVE)  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSystem.cpp")

endif()


if(XFSMACHINE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFSMachine.cpp")

endif()  


if(XSCHEDULER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XScheduler.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XScheduler_XEvent.cpp")

endif()


if(XPUBLISHER_FEATURE)

  add_definitions(-DXPUBLISHER_ACTIVE)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XPublisher.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSubject.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XObserver.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XEvent.cpp")

endif()


if(XUUID_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XUUID.cpp")
  option(HASH_FEATURE "Hash" true)
  option(HASH_CRC32_FEATURE "Hash CRC32" true)

endif()


if(XLOG_FEATURE)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XLog.cpp")
  add_definitions(-DXLOG_ACTIVE)
  option(XFILE_ZIP_FEATURE "XFile Zip format" true)

endif()


list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XPathsManager.cpp")


if(XTRANSLATION_FEATURE)

  option(XFILE_JSON_FEATURE "XFile JSON format" true)
  option(XTRANSLATION_GEN_FEATURE "Translation" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XTranslation.cpp")  

endif()


if(XTRANSLATION_GEN_FEATURE)  

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XLanguage_ISO_639_3.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XTranslation_GEN.cpp")

endif()


if(XSLEEP_FEATURE)

  add_definitions(-DXSLEEP_ACTIVE) 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSleep.cpp")

endif()


if(XPROCESSMANAGER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XProcessManager.cpp")

endif()


if(XSHAREDMEMORYMANAGER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XSharedMemoryManager.cpp")

endif()


if(XDRIVEIMAGEMANAGER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XDriveImageManager.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XDriveImageManager_XEvent.cpp")

endif()


if(XEEPROMMEMORYMANAGER_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XEEPROMMemoryManager.cpp")

endif()


if(APP_CFG_LOCATION_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XLocationAddress.cpp")

endif()


if(XFILE_CFG_FEATURE) 

  option(XFILE_INI_FEATURE "XFile INI format" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileCFG.cpp")

endif()


if(XFILE_INI_FEATURE) 

  option(XFILE_TXT_FEATURE "XFile Text format" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileINI.cpp")

endif()


if(XFILE_ZIP_FEATURE) 

  option(XFILE_FEATURE "XFile" true)   
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileZIP.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileZIP_XEvent.cpp")  

endif()  
 

if(XFILE_XML_FEATURE) 

  option(XFILE_TXT_FEATURE "XFile Text format" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileXML.cpp")

endif()  
 

if(XFILE_JSON_FEATURE)  

  option(XFILE_TXT_FEATURE "XFile Text format" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileJSON.cpp")

endif()


if(XFILE_RIFF_FEATURE) 

  option(XFILE_FEATURE "XFile" true)     
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileRIFF.cpp")

endif()
  
  
if(XFILE_HEX_FEATURE)  

  option(XFILE_TXT_FEATURE "XFile Text format" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileHEX.cpp")

endif()
 

if(XFILE_DFU_FEATURE)  

  option(XFILE_FEATURE "XFile" true)     
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileDFU.cpp")  

endif()  


if(XFILE_TXT_FEATURE)

  option(XFILE_FEATURE "XFile" true)     
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFileTXT.cpp")

endif()  


if(XASN1_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XASN1.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XBER.cpp")

endif()
  

if(XFILE_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XFile.cpp")
  option(CIPHER_SYMMETRIC_FEATURE "Cipher Symetric" true)
  option(CIPHER_ASYMMETRIC_FEATURE "Cipher Asymetric" true)

endif()  


if(XLICENSE_FEATURE)

  option(CIPHER_SYMMETRIC_FEATURE "Cipher Symetric" true)
  option(CIPHER_SYMMETRIC_AES_FEATURE "Cipher Symetric AES" true)
  option(HASH_SHA1_FEATURE "Hash SHA1" true)    
  option(HASH_SHA2_FEATURE "Hash SHA2" true)
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XLicense.cpp")

endif()


# -------------------------------------------------
# Cipher

if(HASH_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/Hash.cpp")
   
  if(HASH_CRC16_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCRC16.cpp")
  
  endif()
 
  if(HASH_CKS16_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCKS16.cpp")
  
  endif()
 
  if(HASH_CRC32_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHCRC32.cpp")
  
  endif()
 
  if(HASH_MD5_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHMD5.cpp")
  
  endif()
 
  if(HASH_SHA1_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHSHA1.cpp")
  
  endif()
 
  if(HASH_SHA2_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHSHA2.cpp")
  
  endif()
 
  if(HASH_COMP128V1_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HashCOMP128v1.cpp")
  
  endif()
 
  if(HASH_WHIRLPOOL_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/HASHWhirlpool.cpp")
  
  endif()   

endif()


if(CIPHER_SYMMETRIC_FEATURE OR CIPHER_ASYMMETRIC_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/Cipher.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKey.cpp")  

endif()


if(CIPHER_SYMMETRIC_FEATURE)

  if(CIPHER_SYMMETRIC_DES_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherDES.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/Cipher3DES.cpp")
  
  endif()

  if(CIPHER_SYMMETRIC_AES_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherAES.cpp")
  
  endif()

  if(CIPHER_SYMMETRIC_BLOWFISH_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherBlowfish.cpp")
  
  endif()

endif()


if(CIPHER_ASYMMETRIC_FEATURE)  
 
  if(CIPHER_ASYMMETRIC_RSA_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_XUTILS}/XMPInteger.cpp")     
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherRSA.cpp") 
 
    if(CIPHER_ASYMMETRIC_FILEKEY_GFK)
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeysFileGKF.cpp")    
	
    endif()

    if(CIPHER_ASYMMETRIC_FILEKEY_PEM)
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherKeysFilePEM.cpp") 
      option(XASN1_FEATURE "ANS.1 functions" true)
	
    endif()

  endif()

  if(CIPHER_ASYMMETRIC_CURVE25519_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_CIPHER}/CipherCurve25519.cpp")  
  
  endif()

endif()


# -------------------------------------------------
# Compress

if(COMPRESS_GZ_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressGZ.cpp")
  option(COMPRESS_FEATURE "Compress" true)

endif()


if(COMPRESS_LZRW1KH_FEATURE)                                                              

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressLZRW1KH.cpp")
  option(COMPRESS_FEATURE "Compress" true)

endif()


if(COMPRESS_LZW_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressLZW.cpp")
  option(COMPRESS_FEATURE "Compress" true)

endif()


if(COMPRESS_ZIP_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressZIP.cpp")
  option(COMPRESS_FEATURE "Compress" true)

endif()


if(COMPRESS_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressManager.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_COMPRESS}/CompressBase.cpp")

endif()


# -------------------------------------------------
# Platforms


# -------------------------------------------------
# Common (all plataforms)

if(SND_FEATURE)

  if((${CMAKE_SYSTEM_NAME} MATCHES "Windows") OR (${CMAKE_SYSTEM_NAME} MATCHES "Linux"))

    if(SND_FEATURE)
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDFactory_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDBuffer_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDElement_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDSource_OpenAL.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_COMMON_SNDOPENAL}/SNDStreamElement_OpenAL.cpp")
	
    endif()

  endif()

endif()


# -------------------------------------------------
# Windows

if(COMPILE_TO_WINDOWS)

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/MainProcWINDOWS.cpp")

  if(GRP_FEATURE)       

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/GRPWINDOWSFactory.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/GRPWINDOWSScreen.cpp")
  
  endif()


  if(INP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSFactory.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSDeviceMouse.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSDeviceKeyboard.cpp")
  
  endif()


  if(INP_SIMULATE_FEATURE)
  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSSimulate.cpp")  

  endif()


  if(INP_CAPTURE_FEATURE)
  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/INPWINDOWSCapture.cpp")  

  endif()


  if(DIO_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSFactory.cpp")
  
  endif()


  if(DIO_PING_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSPing.cpp")
  
  endif()


  if(DIO_STREAMUART_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUART.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUARTLocalEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMUSB_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUSB.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUSBLocalEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMI2C_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamI2C.cpp")    
  
  endif()


  if(DIO_STREAMSPI_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamSPI.cpp")    
  
  endif()


  if(DIO_STREAMICMP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamICMP.cpp")
  
  endif()
 

  if(DIO_STREAMUDP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamUDP.cpp")    
  
  endif()


  if(DIO_STREAMTCPIP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamTCPIP.cpp") 
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamIPLocalEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMBLUETOOTH_FEATURE OR DIO_STREAMBLUETOOTHLE_FEATURE)            

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetooth.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetoothLocalEnumDevices.cpp")      
  
  endif()


  if(DIO_STREAMBLUETOOTH_FEATURE)            

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetoothRemoteEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMBLUETOOTHLE_FEATURE)            

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamBluetoothLERemoteEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMWIFI_FEATURE)            

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSStreamWifiRemoteEnumDevices.cpp")    
  
  endif()


  if(DIO_WIFIMANAGERMODE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSWifiManagerMode.cpp")
  
  endif()


  if(DIO_GPIO_FEATURE)

    if(DIO_GPIO_PCPARALLEL_FEATURE)
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSGPIOPCParallel.cpp") 
	
    endif()

  endif()


  if(DIO_PCAP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSPCap.cpp")      
  
  endif()
  
  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSTrace.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSTimer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSRand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSDir.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSThread.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSDateTime.cpp")
 

  if(XSYSTEM_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSSystem.cpp")
  
  endif()


  if(XSLEEP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSSleep.cpp")
  
  endif()


  if(XCONSOLE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSConsole.cpp")
  
  endif()


  if(XFILE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSFile.cpp")
  
  endif()


  if(XPROCESSMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSProcessManager.cpp")
  
  endif()


  if(XSHAREDMEMORYMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSSharedMemoryManager.cpp")
  
  endif()


  if(XDRIVEIMAGEMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSDriveImageManager.cpp")
  
  endif()


  if(XEEPROMMEMORYMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSEEPROMMemoryManager.cpp")
  
  endif()


  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSAccessControlLists.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSServiceBase.cpp") 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSRegistryManager.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSWMIInterface.cpp") 


  if(DIO_NOTIFICATIONS_MANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/DIOWINDOWSNotificationsManager.cpp")
  
  endif()


  if(X_WINDOWS_VIRTUALDESKTOPMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_WINDOWS}/XWINDOWSVirtualDesktopManager.cpp")
  
  endif()

endif()


# -------------------------------------------------
# Linux

if(COMPILE_TO_LINUX)
 
  if(GRP_FEATURE)  

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/GRPLINUXFactory.cpp")    
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/GRPLINUXScreenX11.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/GRPLINUXScreenFrameBuffer.cpp")    
  
  endif()


  if(INP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXFactory.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceID.cpp")

    if(LINUX_X11_FEATURE) 
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceKeyboardX11.cpp")
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceMouseX11.cpp")    
	
    else()

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceKeyboardDirect.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceMouseDirect.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXDeviceTouchScreenDirect.cpp")

    endif()     

  endif()


  if(INP_SIMULATE_FEATURE)
  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/INPLINUXSimulate.cpp")  

  endif()


  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/MainProcLINUX.cpp")


  if(DIO_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXFactory.cpp")
  
  endif()


  if(DIO_PING_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXPing.cpp")
  
  endif()


  if(DIO_STREAMUART_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUART.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUARTLocalEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMUSB_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUSB.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUSBLocalEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMI2C_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamI2C.cpp")    
  
  endif()


  if(DIO_STREAMSPI_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamSPI.cpp")    
  
  endif()


  if(DIO_STREAMICMP_FEATURE)
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamICMP.cpp")
  endif()
 

  if(DIO_STREAMUDP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamUDP.cpp")    
  
  endif()


  if(DIO_STREAMTCPIP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamTCPIP.cpp") 
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamIPLocalEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMBLUETOOTH_FEATURE OR DIO_STREAMBLUETOOTHLE_FEATURE)            

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetooth.cpp")
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetoothLocalEnumDevices.cpp")      
  
  endif()


  if(DIO_STREAMBLUETOOTH_FEATURE)            

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetoothRemoteEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMBLUETOOTHLE_FEATURE)            

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamBluetoothLERemoteEnumDevices.cpp")
  
  endif()


  if(DIO_STREAMWIFI_FEATURE)        

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXStreamWifiRemoteEnumDevices.cpp")
  
  endif()


  if(DIO_WIFIMANAGERMODE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXWifiManagerMode.cpp")
  
  endif()
 

  if(DIO_PCAP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXPCap.cpp")      
  
  endif()


  if(DIO_GPIO_FEATURE)    
  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIO.cpp")

    if((${TARGET} MATCHES "raspberrypi") OR (${TARGET} MATCHES "raspberrypi_64"))       
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIORaspberryPi.cpp")
	
    endif()  

    if((${TARGET} MATCHES "arm") OR (${TARGET} MATCHES "arm_64"))       
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIOARM.cpp")
	
    endif()  

    if(DIO_GPIO_PCPARALLEL_FEATURE)
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXGPIOPCParallel.cpp")
	
    endif()     

  endif()


  if(DIO_LEDNEOPIXELWS2812B_FEATURE)

    if((${TARGET} MATCHES "raspberrypi") OR (${TARGET} MATCHES "raspberrypi_64"))       
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXLedNeoPixelWS2812BRaspberryPi.cpp")
	
    endif()

  endif()
 

  if(DIO_LINUX_DBUS_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXDBus_XEvent.cpp")  
    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXDBus.cpp")  
   
    if(DIO_LINUX_NETWORKMANAGER_FEATURE)         
  
      list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/DIOLINUXNetworkManager.cpp")   
	
    endif()

  endif()
 
 
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXTrace.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXTimer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXRand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXDir.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXThread.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXDateTime.cpp")
 

  if(XSYSTEM_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXSystem.cpp")

  endif()


  if(XSLEEP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXSleep.cpp")

  endif()


  if(XCONSOLE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXConsole.cpp")

  endif()


  if(XFILE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXFile.cpp")

  endif()


  if(XPROCESSMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXProcessManager.cpp")

  endif()


  if(XSHAREDMEMORYMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXSharedMemoryManager.cpp")

  endif()


  if(XDRIVEIMAGEMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXDriveImageManager.cpp")

  endif()


  if(XEEPROMMEMORYMANAGER_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_LINUX}/XLINUXEEPROMMemoryManager.cpp")

  endif()


endif()


# ----------------------------------------
# Platform Android
 
if(COMPILE_TO_ANDROID)
 
  #list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/ANDROIDJNI.cpp")
  #list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/ANDROIDJNIObject.cpp")
  #list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/ANDROIDNativeActivity.cpp")  
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/MainProcANDROID.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDFactory.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDTrace.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDTimer.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDRand.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDDir.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDThread.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDDateTime.cpp")


  if(XSYSTEM_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDSystem.cpp")
  
  endif()


  if(XSLEEP_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDSleep.cpp")
  
  endif()
 

  if(XFILE_FEATURE)

    list(APPEND SOURCES "${GEN_DIRECTORY_SOURCES_PLATFORMS_ANDROID}/XANDROIDFile.cpp")
  
  endif()

endif()


# --------------------------------------------------------------------
# Library
          
if(SOURCES MATCHES "XFileZIP.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/adler32.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/compress.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/crc32.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/deflate.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/infback.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/inffast.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/inflate.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/inftrees.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/trees.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/uncompr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB}/zutil.c")    
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP}/ioapi.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP}/unzip.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_ZLIB_MINIZIP}/zip.c")

endif()


if(SOURCES MATCHES "DIOPCap.cpp")   

endif()


if(SOURCES MATCHES "DIOLINUXLedNeoPixelWS2812BRaspberryPi.cpp")     

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/mailbox.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/ws2811.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/pwm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/pcm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/dma.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_RPI_WS281X}/rpihw.c")

endif()


if(GRP_2D_FEATURE)
 
  #AGG
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_arc.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_arrowhead.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_bezier_arc.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_bspline.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_curves.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_embedded_raster_fonts.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_gsv_text.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_image_filters.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_line_aa_basics.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_line_profile_aa.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_rounded_rect.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_sqrt_tables.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_affine.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_double_path.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_single_path.cpp")              
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_trans_warp_magnifier.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_bspline.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_contour.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_dash.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_markers_term.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_smooth_poly1.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vcgen_stroke.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vpgen_clip_polygon.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vpgen_clip_polyline.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_SOURCES}/agg_vpgen_segmentator.cpp")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_AGG_FREETYPE}/agg_font_freetype.cpp")
                     
  # FreeType
  # FT_MODULES

  #add_definitions(-DFT_CONFIG_OPTION_FORCE_INT64)

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftbbox.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftbdf.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftbitmap.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftcid.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftfstype.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftgasp.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftglyph.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftgxval.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftmm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftotval.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftpatent.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftpfr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftstroke.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftsynth.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/fttype1.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftwinfnt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/autofit/autofit.c")
  # Rest Modules
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftbase.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/cache/ftccache.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftdebug.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/bdf/bdf.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/gzip/ftgzip.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/cff/cff.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftinit.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/lzw/ftlzw.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/base/ftsystem.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/pcf/pcf.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/pfr/pfr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/psaux/psaux.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/pshinter/pshinter.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/psnames/psmodule.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/raster/raster.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/sfnt/sfnt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/smooth/smooth.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/truetype/truetype.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/type1/type1.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/cid/type1cid.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/type42/type42.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/winfonts/winfnt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/cache/ftcmru.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/cache/ftcmanag.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/sdf/sdf.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_FREETYPE_SOURCES}/svg/svg.c")
    
endif()


if(SOURCES MATCHES "GRPBitmapFileJPG.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jaricom.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcapimin.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcapistd.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcarith.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jccoefct.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jccolor.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcdctmgr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jchuff.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcinit.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcmainct.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcmarker.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcmaster.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcomapi.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcparam.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcprepct.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jcsample.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jctrans.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdapimin.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdapistd.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdarith.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdatadst.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdatasrc.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdcoefct.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdcolor.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jddctmgr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdhuff.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdinput.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmainct.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmarker.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmaster.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdmerge.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdpostct.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdsample.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jdtrans.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jerror.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jfdctflt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jfdctfst.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jfdctint.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jidctflt.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jidctfst.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jidctint.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jmemmgr.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jmemnobs.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jquant1.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jquant2.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_JPEGLIB}/jutils.c")

endif()


if(SOURCES MATCHES "GRPBitmapFilePNG.cpp")

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/png.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngerror.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngget.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngmem.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngpread.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngread.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngrio.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngrtran.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngrutil.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngset.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngtrans.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwio.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwrite.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwtran.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/pngwutil.c")	 
 
  if(COMPILE_TO_LINUX_ARM_RPI)

    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/arm_init.c")
    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/filter_neon_intrinsics.c")
  
  endif()

  if(COMPILE_TO_LINUX_ARM_64 OR COMPILE_TO_LINUX_ARM_RPI_64)

    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/arm_init.c")
    list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LIBPNG}/arm/filter_neon_intrinsics.c")
  
  endif()

endif()


if(SCRIPT_LUA_FEATURE)  

  #add_definitions(-DLUA_USE_POSIX)  
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lapi.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lauxlib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lbaselib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lbitlib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lcode.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lcorolib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lctype.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldblib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldebug.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldo.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ldump.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lfunc.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lgc.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/linit.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/liolib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/llex.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lmathlib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lmem.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/loadlib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lobject.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lopcodes.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/loslib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lparser.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lstate.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lstring.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lstrlib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ltable.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ltablib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/ltm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lundump.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lutf8lib.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lvm.c")
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_LUA}/lzio.c")

endif() 


if(SCRIPT_JAVASCRIPT_FEATURE)

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_DUKTAPE}/duktape.c")

endif()


if(COMPILE_TO_WINDOWS)

  remove_definitions(-DUNICODE)
  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_STACKWALKER}/StackWalker.cpp")

endif()


if(GOOGLETEST_FEATURE)    

  add_definitions(-DGOOGLETEST_ACTIVE) 

  # GoogleTest requires at least C++14
  set(CMAKE_CXX_STANDARD 14)

  enable_testing()

  include(GoogleTest)    
  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)    

  list(APPEND SOURCES "${GEN_DIRECTORY_THIRDPARTYLIBRARIES_GOOGLETEST_SOURCES}/gtest-all.cc")
  
endif()

