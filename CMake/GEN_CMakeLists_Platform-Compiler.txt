# --------------------------------------------------------------------
# CMakeLists_Platform-Compiler.txt to GEN FrameWork
# --------------------------------------------------------------------


# --------------------------------------------------------------------
# Variables assignated

# COMPILE_TO_WINDOWS               "Compile to Windows  General"
# COMPILE_TO_WINDOWS_PC_32         "Compile to Windows  PC 32 Bits"
# COMPILE_TO_WINDOWS_PC_64         "Compile to Windows  PC 64 Bits"

# COMPILE_TO_LINUX                 "Compile to Linux    General"
# COMPILE_TO_LINUX_PC_64           "Compile to Linux    PC 64"
# COMPILE_TO_LINUX_RPI             "Compile to Linux    Rapsberry Pi"
# COMPILE_TO_LINUX_RPI_64          "Compile to Linux    Rapsberry Pi 64"
# COMPILE_TO_LINUX_ARM             "Compile to Linux    ARM"
# COMPILE_TO_LINUX_ARM_64          "Compile to Linux    ARM 64"

# COMPILE_TO_ANDROID               "Compile to Android  General"

# COMPILE_TO_STM32                 "Compile to STM32    General"

# --------------------------------------------------------------------

# COMPILE_WITH_MSVC                "Compile Microsoft Compiler (MSVC)"
# COMPILE_WITH_GCC                 "Compile GNU Compiler Collection (GCC)"
# COMPILE_WITH_CLANG               "Compile CLang (front-end of LLVM)"

# --------------------------------------------------------------------


# --- CACHE COMPILER ------------------------------------------------

 find_program(CCACHE_PROGRAM ccache)

 if(CCACHE_PROGRAM)

    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
    message(STATUS "[Found CCACHE]")

 endif()

 message(STATUS "[Target: (${TARGET})]")

 if("${TARGET}" STREQUAL "")

    message(STATUS "[Target: Is Empty]")

 endif()

# --- Compile in Windows Platform ------------------------------------

 if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

   option(COMPILE_TO_WINDOWS "Compile to Windows General"  true)

   if("${TARGET}" STREQUAL "pc")

     if(CMAKE_SIZEOF_VOID_P EQUAL 8)

       option(COMPILE_TO_WINDOWS_PC_64 "Compile to Windows PC 64 Bits" true)
       message(STATUS "[Select platform Windows PC 64 Bits]")

     else()

       if(CMAKE_SIZEOF_VOID_P EQUAL 4)

         option(COMPILE_TO_WINDOWS_PC_32 "Compile to Windows PC 32 Bits" true)
         message(STATUS "[Select platform Windows PC 32 Bits]")

       endif()

     endif()

   endif()


   if("${TARGET}" STREQUAL "Android")   

     option(COMPILE_TO_WINDOWS "Compile to Windows General" false)
     option(COMPILE_TO_ANDROID "Compile to Android"         true)
     message(STATUS "[Select platform Android]")

   endif()


   if("${TARGET}" STREQUAL "STM32")

     option(COMPILE_TO_WINDOWS "Compile to Windows General" false)
     option(COMPILE_TO_STM32_ARM "Compile to STM32"         true)
     message(STATUS "[Select platform STM32]")

   endif()

 endif()

# --------------------------------------------------------------------



# --- Compile in Linux Platform ---------------------------------------

 if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

   option(COMPILE_TO_LINUX    "Compile to Linux   General" true)  

   if("${TARGET}" STREQUAL "pc") 

     option(COMPILE_TO_LINUX_PC_64 "Compile to Linux PC 64 Bits" true)
     message(STATUS "[Select platform Linux PC 64 Bits]")

   endif()

   if("${TARGET}" STREQUAL "raspberrypi")

     option(COMPILE_TO_LINUX_ARM_RPI "Compile to Linux Rapsberry Pi" true)
     message(STATUS "[Select platform Linux Raspberry Pi]")

   endif()

   if("${TARGET}" STREQUAL "raspberrypi_64")

     option(COMPILE_TO_LINUX_ARM_RPI_64 "Compile to Linux Rapsberry Pi 64" true)
     message(STATUS "[Select platform Linux Raspberry Pi 64 Bits]")

   endif()   

   if("${TARGET}" STREQUAL "arm")

     option(COMPILE_TO_LINUX_ARM "Compile to Linux ARM" true)
     message(STATUS "[Select platform Linux ARM]")

   endif()

   if("${TARGET}" STREQUAL "arm_64")

     option(COMPILE_TO_LINUX_ARM_64 "Compile to Linux ARM 64" true)
     message(STATUS "[Select platform Linux ARM 64 Bits]")

   endif()

 endif()

# --------------------------------------------------------------------



# --- Type of compile ------------------------------------------------

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC"))

  add_definitions(-DCOMPILER_MSVC)
  option(COMPILE_WITH_MSVC "Compile with Microsoft Compiler (MSVC)" true)
  message(STATUS "[Select for compile with Microsoft Compiler (MSVC)]")

endif()

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"))

  add_definitions(-DCOMPILER_GCC)
  option(COMPILE_WITH_GCC "Compile with GNU Compiler Collection (GCC)" true)
  message(STATUS "[Select for compile with GNU Compiler Collection (GCC)]")

endif()

if(("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))

  add_definitions(-DCOMPILER_CLANG)
  option(COMPILE_WITH_CLANG "Compile with CLang (front-end of LLVM)" true)
  message(STATUS "[Select for compile with CLang (front-end of LLVM)]")

endif()

# --------------------------------------------------------------------

